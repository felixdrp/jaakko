{"version":3,"sources":["actions/actions.js"],"names":[],"mappings":"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","file":"actions/actions.js","sourcesContent":["// SErver actions\n\n// Register a new account in the db and add to the account list\nexport const REGISTER_ACCOUNT = 'REGISTER_ACCOUNT'\n\n// Check the account and add to the account list\nexport const LOGIN_ACCOUNT = 'LOGIN_ACCOUNT'\n\nexport function registerAccount(account) {\n  return { type: REGISTER_ACCOUNT, account }\n}\n\nexport function loginAccount(login) {\n  return { type: LOGIN_ACCOUNT, login }\n}\n\n\n// Redux: Admin accounts in the server\nexport const ACCOUNTS_ADD = 'ACCOUNTS_ADD'\nexport const ACCOUNTS_UPDATE = 'ACCOUNTS_UPDATE'\nexport const ACCOUNTS_REMOVE = 'ACCOUNTS_REMOVE'\n\nexport function accountsAdd(account) {\n  return { type: ACCOUNTS_ADD, payload: account }\n}\nexport function accountsUpdate(account) {\n  return { type: ACCOUNTS_UPDATE, payload: account }\n}\nexport function accountsRemove(account) {\n  return { type: ACCOUNTS_REMOVE, payload: account }\n}\n\n// Create a group of accounts\nexport const GROUPS_ADD = 'GROUPS_ADD'\nexport const GROUPS_REMOVE = 'GROUPS_REMOVE'\n\nexport const GROUPS_ADD_ACCOUNT = 'GROUPS_ADD_ACCOUNT'\nexport const GROUPS_REMOVE_ACCOUNT = 'GROUPS_REMOVE_ACCOUNT'\n\nexport function groupsAdd(groupId, list=[]) {\n  return { type: GROUPS_ADD, payload: { groupId, list } }\n}\nexport function groupsRemove(groupId) {\n  return { type: GROUPS_REMOVE, payload: { groupId } }\n}\n\nexport function groupsAddAccount(groupId, account) {\n  return { type: GROUPS_ADD_ACCOUNT, payload: { groupId, account } }\n}\n// export function groupsUpdateAccount((groupId, account) {\n//   return { type: ACCOUNTS_UPDATE, payload: account }\n// }\nexport function groupsRemoveAccount(groupId, account) {\n  return { type: GROUPS_REMOVE_ACCOUNT, payload: { groupId, account } }\n}\n\n// Thunk, to move an account betwen groups.\nexport function moveAccounFromGroup(accounId, toGroup) {\n  return (dispatch, getState) => {\n    // cState = current state\n    let cState = getState()\n    if (!cState.accounts[accounId]) {\n      console.log('Account not found')\n      console.log(cState)\n\n      return\n    }\n\n    if (cState.accounts[accounId].group) {\n      // Remove account from it the actual group\n      dispatch(\n        groupsRemoveAccount(cState.accounts[accounId].group, accounId)\n      )\n    }\n    // Add the group to the account\n    dispatch( accountsUpdate({ ...cState.accounts[accounId], group: toGroup}) )\n    // Add the account to the group\n    dispatch( groupsAddAccount(toGroup, accounId) )\n  }\n}\n\nexport const SEND_ALL_MESSAGE = 'SEND_GROUP_MESSAGE'\nexport const SEND_GROUP_MESSAGE = 'SEND_GROUP_MESSAGE'\nexport const SEND_ACCOUNT_MESSAGE = 'SEND_ACCOUNT_MESSAGE'\n\n\n/*\n * action creators\n */\n\n\nexport const WAIT = 'WAIT'\nexport const CONTINUE = 'CONTINUE'\n\nexport function synchronize( action ) {\n  switch (action) {\n    case 'wait':\n    case 'await':\n      return { type: WAIT }\n    case 'continue':\n      return { type: CONTINUE }\n    default:\n      return { type: WAIT }\n  }\n}\n"],"sourceRoot":"/source/"}