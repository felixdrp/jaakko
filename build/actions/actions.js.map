{"version":3,"sources":["actions/actions.js"],"names":["registerAccount","loginAccount","accountsAdd","accountsUpdate","accountsRemove","groupsAdd","groupsRemove","groupsAddAccount","groupsRemoveAccount","moveAccounFromGroup","storeStateWithoutWebSocket","synchronize","REGISTER_ACCOUNT","LOGIN_ACCOUNT","account","type","login","ACCOUNTS_ADD","ACCOUNTS_UPDATE","ACCOUNTS_REMOVE","payload","GROUPS_ADD","GROUPS_REMOVE","GROUPS_ADD_ACCOUNT","GROUPS_REMOVE_ACCOUNT","groupId","list","accounId","toGroup","dispatch","getState","cState","accounts","console","log","group","SEND_ALL_MESSAGE","SEND_GROUP_MESSAGE","SEND_ACCOUNT_MESSAGE","state","copyWithoutWS","time","key","forEach","id","ws","timeEnd","WAIT","CONTINUE","action"],"mappings":"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","file":"actions/actions.js","sourcesContent":["// SErver actions\n\n// Register a new account in the db and add to the account list\nexport const REGISTER_ACCOUNT = 'REGISTER_ACCOUNT'\n\n// Check the account and add to the account list\nexport const LOGIN_ACCOUNT = 'LOGIN_ACCOUNT'\n\nexport function registerAccount(account) {\n  return { type: REGISTER_ACCOUNT, account }\n}\n\nexport function loginAccount(login) {\n  return { type: LOGIN_ACCOUNT, login }\n}\n\n\n// Redux: Admin accounts in the server\nexport const ACCOUNTS_ADD = 'ACCOUNTS_ADD'\nexport const ACCOUNTS_UPDATE = 'ACCOUNTS_UPDATE'\nexport const ACCOUNTS_REMOVE = 'ACCOUNTS_REMOVE'\n\nexport function accountsAdd(account) {\n  return { type: ACCOUNTS_ADD, payload: account }\n}\nexport function accountsUpdate(account) {\n  return { type: ACCOUNTS_UPDATE, payload: account }\n}\nexport function accountsRemove(account) {\n  return { type: ACCOUNTS_REMOVE, payload: account }\n}\n\n// Create a group of accounts\nexport const GROUPS_ADD = 'GROUPS_ADD'\nexport const GROUPS_REMOVE = 'GROUPS_REMOVE'\n\nexport const GROUPS_ADD_ACCOUNT = 'GROUPS_ADD_ACCOUNT'\nexport const GROUPS_REMOVE_ACCOUNT = 'GROUPS_REMOVE_ACCOUNT'\n\nexport function groupsAdd(groupId, list=[]) {\n  return { type: GROUPS_ADD, payload: { groupId, list } }\n}\nexport function groupsRemove(groupId) {\n  return { type: GROUPS_REMOVE, payload: { groupId } }\n}\n\nexport function groupsAddAccount(groupId, account) {\n  return { type: GROUPS_ADD_ACCOUNT, payload: { groupId, account } }\n}\n// export function groupsUpdateAccount((groupId, account) {\n//   return { type: ACCOUNTS_UPDATE, payload: account }\n// }\nexport function groupsRemoveAccount(groupId, account) {\n  return { type: GROUPS_REMOVE_ACCOUNT, payload: { groupId, account } }\n}\n\n// Thunk, to move an account betwen groups.\nexport function moveAccounFromGroup(accounId, toGroup) {\n  return (dispatch, getState) => {\n    // cState = current state\n    let cState = getState()\n    if (!cState.accounts[accounId]) {\n      console.log('Account not found')\n      console.log(cState)\n\n      return\n    }\n\n    if (cState.accounts[accounId].group) {\n      // Remove account from it the actual group\n      dispatch(\n        groupsRemoveAccount(cState.accounts[accounId].group, accounId)\n      )\n    }\n    // Add the group to the account\n    dispatch( accountsUpdate({ ...cState.accounts[accounId], group: toGroup}) )\n    // Add the account to the group\n    dispatch( groupsAddAccount(toGroup, accounId) )\n  }\n}\n\nexport const SEND_ALL_MESSAGE = 'SEND_GROUP_MESSAGE'\nexport const SEND_GROUP_MESSAGE = 'SEND_GROUP_MESSAGE'\nexport const SEND_ACCOUNT_MESSAGE = 'SEND_ACCOUNT_MESSAGE'\n\nexport function storeStateWithoutWebSocket(state) {\n  let copyWithoutWS = {}\n  console.log('XXXXXXXresult')\n  console.log(state)\n  console.time('time1')\n  for(let key in state) {\n    if (key == 'accounts') {\n      copyWithoutWS[key] = {}\n      copyWithoutWS[key].list = state[key].list\n      state.accounts.list.forEach( (id) => { copyWithoutWS.accounts[id] = {...state.accounts[id], ws: null} } )\n      // remove ws from accounts before send\n      copyWithoutWS.accounts.list.forEach( (id) => { delete copyWithoutWS.accounts[id].ws } )\n    } else {\n      copyWithoutWS[key] = state[key]\n    }\n  }\n  console.timeEnd('time1')\n  console.log(copyWithoutWS)\n  console.log(state)\n\n  return copyWithoutWS\n}\n\n/*\n * action creators\n */\n\n\nexport const WAIT = 'WAIT'\nexport const CONTINUE = 'CONTINUE'\n\nexport function synchronize( action ) {\n  switch (action) {\n    case 'wait':\n    case 'await':\n      return { type: WAIT }\n    case 'continue':\n      return { type: CONTINUE }\n    default:\n      return { type: WAIT }\n  }\n}\n"],"sourceRoot":"/source/"}