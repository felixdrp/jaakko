{"version":3,"sources":["modules/check-field.js"],"names":["checkAll","fields","fieldsOptions","field","error","undefined","mustHave","check","type","fieldName","input","options","isLength","min","max","isAlphanumeric","isEmail","RegExp","numbers","capitals","symbols","test","isHexadecimal"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AAEA;;;;;;;;;;AAWA,SAASA,QAAT,CAAkBC,MAAlB,EAA0BC,aAA1B,EAAyC;AACvC,MAAIC,cAAJ;AAAA,MACIC,cADJ;;AAGA,OAAKD,KAAL,IAAcD,aAAd,EAA6B;AAC3B;AACA,QACEA,cAAcC,KAAd,KACA,EACE,CACEF,OAAOE,KAAP,MAAkB,IAAlB,IACAF,OAAOE,KAAP,MAAkBE,SADlB,IAEAJ,OAAOE,KAAP,MAAkB,EAHpB,KAKAD,cAAcC,KAAd,EAAqBG,QAArB,KAAkC,KANpC,CAFF,EAUE;AACAF,cAAQG,MAAMJ,KAAN,EAAaF,OAAOE,KAAP,CAAb,EAA4BD,cAAcC,KAAd,CAA5B,CAAR;AACA,UAAIC,UAAU,IAAV,IAAkB,QAAOA,KAAP,uDAAOA,KAAP,OAAiB,QAAnC,IAA+CA,MAAMI,IAAN,KAAe,OAAlE,EAA2E;AACzE,eAAOJ,KAAP;AACD;AACF;;AAED;AACA,QACEF,cAAcC,KAAd,KACAD,cAAcC,KAAd,EAAqBG,QAArB,KAAkC,IADlC,KAGEL,OAAOE,KAAP,MAAkB,IAAlB,IACAF,OAAOE,KAAP,MAAkBE,SADlB,IAEAJ,OAAOE,KAAP,MAAkB,EALpB,CADF,EAQE;AACA,aAAO,6CACcA,KADd,gCAEQA,KAFR,0BAGL,iBAHK,EAIL,sCAJK,CAAP;AAMD;AACF;AACD,SAAO,IAAP;AACD;;AAED;;;;;;;;;;;;AAYA,SAASI,KAAT,CAAeE,SAAf,EAA0BC,KAA1B,EAAiCC,OAAjC,EAA0C;;AAExC;AACA,MAAK,oBAAUC,QAAV,CAAmBF,KAAnB,EAA0B,EAAEG,KAAKF,QAAQE,GAAf,EAA1B,MAAqD,KAA1D,EAAkE;AAChE;;AAEA,WAAO,6CACcJ,SADd,iBAEL,wBAFK,EAGL,iBAHK,EAIL,sCAJK,CAAP;AAMD;;AAED;AACA,MAAK,oBAAUG,QAAV,CAAoBF,KAApB,EAA2B,EAAEI,KAAKH,QAAQG,GAAf,EAA3B,MAAsD,KAA3D,EAAmE;AACjE,WAAO,6CACcL,SADd,iBAEL,uBAFK,EAGL,gBAHK,EAIL,sCAJK,CAAP;AAMD;;AAED;AACA,UAAQE,QAAQH,IAAhB;AACE,SAAK,cAAL;AACE,UACE,OAAOE,KAAP,KAAiB,QADnB,EAEE;AACA,eAAO,6CACcD,SADd,gCAEQA,SAFR,uBAGL,6BAHK,EAIL,sCAJK,CAAP;AAMD;;AAED,UACE,oBAAUM,cAAV,CAAyBL,KAAzB,MAAoC,KADtC,EAEE;AACA,eAAO,6CACcD,SADd,gCAEQA,SAFR,uCAGL,6BAHK,EAIL,sCAJK,CAAP;AAMD;AACD;;AAEF,SAAK,OAAL;AACE,UACE,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,oBAAUM,OAAV,CAAkBN,KAAlB,MAA6B,KAD5D,EAEE;AACA,eAAO,6CACcD,SADd,2CAEQA,SAFR,4BAGL,iBAHK,EAIL,sCAJK,CAAP;AAMD;AACD;;AAEF,SAAK,UAAL;AACE,UACE,OAAOC,KAAP,KAAiB,QADnB,EAEE;AACA,eAAO,6CACcD,SADd,gCAEQA,SAFR,uBAGL,oBAHK,EAIL,sCAJK,CAAP;AAMD;AACD,UACE,IAAIQ,MAAJ,CACE,gBAAaN,QAAQO,OAAR,IAAmB,CAAnB,GAAuBP,QAAQO,OAA/B,GAAyC,CAAtD,wDAEcP,QAAQQ,QAAR,IAAoB,CAApB,GAAwBR,QAAQQ,QAAhC,GAA2C,CAFzD,6BAGYR,QAAQS,OAAR,IAAmB,CAAnB,GAAuBT,QAAQS,OAA/B,GAAyC,CAHrD,sBAIKT,QAAQE,GAAR,IAAe,CAAf,GAAmBF,QAAQE,GAA3B,GAAiC,CAJtC,UADF,EAMEQ,IANF,CAMOX,KANP,MAMkB,KAPpB,EAQE;AACA,eAAO,6CACcD,SADd,gCAEQA,SAFR,iBAGL,oBAHK,EAIL,sCAJK,CAAP;AAMD;AACD;;AAEF,SAAK,OAAL;AACE,UACE,OAAOC,KAAP,KAAiB,QAAjB,IAA6B,oBAAUY,aAAV,CAAwBZ,KAAxB,MAAmC,KADlE,EAEE;AACA,eAAO,6CACcD,SADd,2CAEQA,SAFR,4BAGL,iBAHK,EAIL,sCAJK,CAAP;AAMD;AACD;AA9EJ;;AAiFA,SAAO,IAAP;AACD;;kBAEc;AACbF,cADa;AAEbP;AAFa,C","file":"check-field.js","sourcesContent":["import validator from 'validator'\nimport {reportError} from './log/error'\n\n/**\n * Check the type of an object of fields (variables)\n *\n * @param {Object} fields An object with multiple fields to check type\n * @param {Object} fieldsOptions An object whose values correspond to different\n * params the input must validate.\n * @returns {null or Object error} Return null if the type is correct or\n * an object error\n */\n\n\nfunction checkAll(fields, fieldsOptions) {\n  let field,\n      error;\n\n  for (field in fieldsOptions) {\n    // Check types\n    if (\n      fieldsOptions[field] &&\n      !(\n        (\n          fields[field] === null ||\n          fields[field] === undefined ||\n          fields[field] === ''\n        ) &&\n        fieldsOptions[field].mustHave === false\n      )\n    ) {\n      error = check(field, fields[field], fieldsOptions[field])\n      if (error !== null && typeof error === 'object' && error.type === 'error') {\n        return error\n      }\n    }\n\n    // Check must have\n    if (\n      fieldsOptions[field] &&\n      fieldsOptions[field].mustHave === true &&\n      (\n        fields[field] === null ||\n        fields[field] === undefined ||\n        fields[field] === ''\n      )\n    ) {\n      return reportError(\n        `The input field ${field} not valid`,\n        `The field ${field} must have a value.`,\n        'FIELD_UNDEFINED',\n        '7733f0f8-1d80-4c51-99e8-fa659cdd199f',\n      )\n    }\n  }\n  return null\n}\n\n/**\n * Check the type of a field (variable)\n *\n * @param {String} fieldName A String with the name of the input.\n * Used to return a meaningful error message.\n * @param {Mixed} input An field or var, to be checked the type.\n * @param {Object} options An object whose values correspond to different\n * params the input must validate.\n * @returns {true or Object error} Return true if the type is correct or\n * an object error\n */\n\nfunction check(fieldName, input, options) {\n\n  // Check min Length\n  if ( validator.isLength(input, { min: options.min } ) === false ) {\n    // console.log(input + ' >>>>>>> ' + JSON.stringify(input,null,2) )\n\n    return reportError(\n      `The input field ${fieldName} not valid`,\n      'The field is too short',\n      'FIELD_TOO_SHORT',\n      '83527cac-4100-43e6-8ce9-8068c0bccf6a',\n    )\n  }\n\n  // Check max Length\n  if ( validator.isLength( input, { max: options.max } ) === false ) {\n    return reportError(\n      `The input field ${fieldName} not valid`,\n      'The field is too long',\n      'FIELD_TOO_LONG',\n      '4b7917ff-1dbe-495d-8ae6-1a9aac25fd9b',\n    )\n  }\n\n  // Check type\n  switch (options.type) {\n    case 'alphanumeric':\n      if (\n        typeof input !== 'string'\n      ) {\n        return reportError(\n          `The input field ${fieldName} not valid`,\n          `The field ${fieldName} is not a string`,\n          'ALPHANUMERIC_TYPE_NOT_VALID',\n          '1371922c-7f04-4a9c-bfca-3a250de5fdc7',\n        )\n      }\n\n      if (\n        validator.isAlphanumeric(input) === false\n      ) {\n        return reportError(\n          `The input field ${fieldName} not valid`,\n          `The field ${fieldName} constains a not valid character`,\n          'ALPHANUMERIC_TYPE_NOT_VALID',\n          '2aec8e36-d6c6-4c1d-8df3-d4dae6b5cb34',\n        )\n      }\n      break;\n\n    case 'email':\n      if (\n        typeof input !== 'string' || validator.isEmail(input) === false\n      ) {\n        return reportError(\n          `The input field ${fieldName} is not a valid email`,\n          `The field ${fieldName} is not a valid email`,\n          'EMAIL_NOT_VALID',\n          'df475ee0-4e7f-436e-8e5f-25316f91f48f',\n        )\n      }\n      break;\n\n    case 'password':\n      if (\n        typeof input !== 'string'\n      ) {\n        return reportError(\n          `The input field ${fieldName} not valid`,\n          `The field ${fieldName} is not a string`,\n          'PASSWORD_NOT_VALID',\n          '7102e599-c3f5-4e36-ba49-e057828ea931',\n        )\n      }\n      if (\n        new RegExp(\n          `^(?=.*\\\\d{${options.numbers >= 0 ? options.numbers : 0},})` +\n          `(?=.*[a-zA-Z0-9]{1,})` +\n          `(?=.*[A-Z]{${options.capitals >= 0 ? options.capitals : 0},})` +\n          `(?=.*\\\\W{${options.symbols >= 0 ? options.symbols : 0},})` +\n          `.{${options.min >= 0 ? options.min : 4},}$`\n        ).test(input) === false\n      ) {\n        return reportError(\n          `The input field ${fieldName} not valid`,\n          `The field ${fieldName} not valid`,\n          'PASSWORD_NOT_VALID',\n          '5d4c774e-cfc7-4e73-b240-07def5f224cd',\n        )\n      }\n      break;\n\n    case 'token':\n      if (\n        typeof input !== 'string' || validator.isHexadecimal(input) === false\n      ) {\n        return reportError(\n          `The input field ${fieldName} is not a valid token`,\n          `The field ${fieldName} is not a valid token`,\n          'TOKEN_NOT_VALID',\n          '468bdda4-7647-4720-8db9-d6a067880215',\n        )\n      }\n      break;\n  }\n\n  return true\n}\n\nexport default {\n  check,\n  checkAll,\n}\n"]}