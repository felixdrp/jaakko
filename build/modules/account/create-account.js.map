{"version":3,"sources":["modules/account/create-account.js"],"names":["input","options","console","log","error","fields","firstName","surename","email","password","reEnterPassword","newfieldsOptions","checkAll","db","colUser","res","token","newUserID","connect","url","collection","findOne","close","insertOne","_id","user","hashSync","hash","createHash","update","digest","provider","identifier","accessToken","refreshToken","answer","constains","createAccount"],"mappings":"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","file":"modules/account/create-account.js","sourcesContent":["import deepmerge from 'deepmerge'\nimport field from '../check-field'\nimport {reportError} from '../log/error'\nimport { MongoClient, ObjectID } from 'mongodb'\nimport { mongodbConf, fieldsOptions } from '../../config'\nimport { createToken } from '../token-generator'\nimport bcrypt from 'bcryptjs'\nimport crypto from 'crypto'\n\n\nexport async function createAccount(input, options) {\n  // input fields\n  if (!input || typeof input !== 'object' ) {\n    return reportError(\n      'Register input type not valid',\n      'Input fields is not an object type.',\n      'RINV',\n      '30db4b60-fe9e-4c97-87fd-3149c26fe560',\n    )\n  }\n  console.log(Object.keys(input))\n  console.log(JSON.stringify(input))\n\n  let error = {};\n\n  let fields = {\n    firstName: '',\n    surename: '',\n    email: '',\n    password: '',\n    reEnterPassword: '',\n    ...input,\n  }\n\n  let newfieldsOptions\n\n  if (options && typeof options === 'object' ) {\n    newfieldsOptions = deepmerge( fieldsOptions, options )\n  } else {\n    newfieldsOptions = {...fieldsOptions}\n  }\n\n  // Check fields\n  error = field.checkAll(fields, newfieldsOptions)\n\n  if (error !== null) {\n    return error\n  }\n\n  // Check password and reEnterPassword are equal\n  if (fields.password !== fields.reEnterPassword) {\n    return reportError(\n      'Register input fields password and re enter password are not equal.',\n      'Fields password and re enter password are not equal',\n      'RIFPREPNEQUAL',\n      '9bcde4cf-9d1f-4b68-8f6f-00e7a3ac965f',\n    )\n  }\n\n  let db = null,\n      colUser = null,\n      res  = null,\n      token = null,\n      newUserID = null;\n\n  try {\n    db = await MongoClient.connect(mongodbConf.url)\n    // Check the user/email is not taken\n    colUser = db.collection('User')\n    res = await colUser.findOne({ email: fields.email })\n\n    if (res !== null) {\n      db.close()\n      return reportError(\n        'Email already used.',\n        'The email is already used.',\n        'REGISTER_EMAIL_ALREADY_TAKEN_ERROR',\n        '4428b93b-3934-4137-aee1-5575c3e98360',\n      )\n    }\n    // Create an mondoDB ObjectID for the new user\n    newUserID = new ObjectID()\n    // Pass the token provided or create a new token\n    // debugger\n\n    token = fields.token || await createToken()\n\n    // Add user to collection db.User\n    res = await db.collection('User').insertOne({\n      _id: newUserID,\n      firstName: fields.firstName,\n      surename: fields.surename,\n      email: fields.email,\n      // uploadAsPrivate: true,\n      token,\n      // tokenupdate: new Date(),\n      // question: ''\n    })\n\n    // Add user to collection db.Passport\n    res = await db.collection('Passport').insertOne({\n      user: newUserID,\n      password: bcrypt.hashSync(fields.password),\n      hash:\n        fields.hash ||\n        crypto\n          .createHash('sha512')\n          .update(fields.email + fields.password)\n          .digest('base64'),\n      provider: 'local',\n      identifier: '',\n      // Hardcoding for oauth2\n      accessToken: '',\n      refreshToken: '',\n      answer: ''\n    })\n\n    // res = await colUser.findOne({ email: fields.email })\n    // console.log('Response >>>>>>> ' + res )\n\n  } catch (error) {\n    if (db) {\n      db.close()\n    }\n\n    if (db === null || error.constains('connect ECONNREFUSED') ) {\n      return reportError(\n        'Database connection error.',\n        'It was an error in the connection with the database.',\n        'DATA_BASE_CONNECTION_ERROR',\n        'a7c5bbb7-ee5c-45fe-af13-29e3c2cda683',\n      )\n    }\n    // throw error\n  }\n\n  // // console.log('>>>>>>> ' + JSON.stringify(fieldsOptions,null,2) )\n  // // console.log('>>>>>>> ' + JSON.stringify(options,null,2) )\n  // console.log('Fields >>>>>>> ' + JSON.stringify(fields) )\n  // console.log('OPTIONS >>>>>>> ' + JSON.stringify(fieldsOptions) )\n  db.close();\n  return token\n}\n"],"sourceRoot":"/source/"}