{"version":3,"sources":["modules/account/login-account.js"],"names":["input","options","error","fields","email","password","hash","newfieldsOptions","option","checkAll","db","colUser","res","token","passport","user","connect","url","collection","findOne","close","_id","compareSync","firstName","surename","constructor","name","console","log","constains","loginAccount"],"mappings":"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","file":"modules/account/login-account.js","sourcesContent":["import deepmerge from 'deepmerge'\nimport field from '../check-field'\nimport {reportError} from '../log/error'\nimport { MongoClient, ObjectID } from 'mongodb'\nimport { mongodbConf, fieldsOptions } from '../../config'\nimport { createToken } from '../token-generator'\nimport bcrypt from 'bcryptjs'\n\nexport async function loginAccount(input, options) {\n  // Check input fields\n  if (!input || typeof input !== 'object' ) {\n    return reportError(\n      'Login input type not valid',\n      'Input fields is not an object type.',\n      'LOGIN_TYPE_ERROR',\n      '0d8969d0-102d-4ece-a742-4aad7cead869',\n    )\n  }\n\n  let error = {};\n\n  let fields = {\n    email: input.email || '',\n    password: input.password || '',\n    hash: input.hash || '',\n  }\n\n  let newfieldsOptions\n\n  if (options && typeof options === 'object' ) {\n    newfieldsOptions = deepmerge( fieldsOptions, options )\n  } else {\n    newfieldsOptions = {...fieldsOptions}\n  }\n\n  // Remove options don't used by loginAccount\n  for (let option in newfieldsOptions) {\n    switch (option) {\n      case 'email':\n      case 'password':\n      case 'hash':\n        continue\n      default:\n        delete newfieldsOptions[option]\n    }\n  }\n  // console.log('LLL> ' + Object.keys(newfieldsOptions))\n\n  // Check fields with its options\n  error = field.checkAll(fields, newfieldsOptions)\n\n  if (error !== null) {\n    return error\n  }\n\n  // Check login\n  let db = null,\n      colUser = null,\n      res  = null,\n      token = null,\n      passport = null,\n      user = null;\n\n  try {\n    db = await MongoClient.connect(mongodbConf.url)\n    // Check the user/email is not taken\n    colUser = db.collection('User')\n    user = await colUser.findOne({ email: fields.email })\n    // If account not found\n    if (user === null) {\n      db.close()\n      return reportError(\n        'Account Email not found.',\n        'Account Email not found.',\n        'LOGIN_ACCOUNT_NOT_FOUND_ERROR',\n        'bf4fe14b-a186-4ab6-98d9-a5435e321854',\n      )\n    }\n\n    passport = await db.collection('Passport').findOne({ user: user._id })\n    res = bcrypt.compareSync(fields.password, passport.password)\n    // If res = false then password not valid\n    if (res === false) {\n      db.close()\n      return reportError(\n        'Password not valid.',\n        'The input password is not the same as the account\\'s password',\n        'LOGIN_ACCOUNT_PASSWORD_ERROR',\n        '5b8b302d-9da7-49ae-8a92-12f34fd658b3',\n      )\n    }\n\n    db.close();\n    return {\n      email: user.email,\n      firstName: user.firstName,\n      surename: user.surename,\n      token: user.token,\n    }\n\n  } catch (error) {\n    if (db) {\n      db.close()\n    }\n\n    if ('constructor' in error && error.constructor.name == 'TypeError') {\n      console.log(error)\n      return\n    }\n\n    if (db === null || error.constains('connect ECONNREFUSED') ) {\n      return reportError(\n        'Database connection error.',\n        'It was an error in the connection with the database.',\n        'DATA_BASE_CONNECTION_ERROR',\n        'a7c5bbb7-ee5c-45fe-af13-29e3c2cda683',\n      )\n    }\n  }\n}\n"],"sourceRoot":"/source/"}