{"version":3,"sources":["modules/mathComputations.js"],"names":["processMathResults","data","accounts","results","reduce","prev","current","account","accountId","currentEntry","email","firstname","firstName","surname","mathScore","lastTimeSubmitted","endTimestamp","res","surveyData","numbers","currentNumbers","solution","trim","sum","total","timeSubmitted","push","sort","a","b","map","item","i","rank","pay","getPay"],"mappings":";;;;;kBACwBA,kB;AAAT,SAASA,kBAAT,CAA4BC,IAA5B,EAAiCC,QAAjC,EAA2C;;AAE9C,MAAID,QAAQ,IAAZ,EAAkB;AAChB;AACD;;AAED,MAAIE,UAAUF,KAAKG,MAAL,CACZ,UAACC,IAAD,EAAOC,OAAP,EAAmB;AACb,QAAIC,UAAUL,SAASI,QAAQE,SAAjB,CAAd;AACA,QAAIC,eAAe,EAAEF,SAAU,EAACG,OAAOJ,QAAQE,SAAhB,EAA2BG,WAAWJ,QAAQK,SAA9C,EAAyDC,SAASN,QAAQM,OAA1E,EAAZ,EAAkGC,WAAW,CAA7G,EAAgHC,mBAAmBT,QAAQU,YAA3I,EAAnB;;AAEA,QAAIC,MAAMX,QAAQY,UAAR,CAAmBC,OAAnB,CAA2Bf,MAA3B,CACN,UAACC,IAAD,EAAOe,cAAP,EAA2B;AACzB,UAAIA,eAAeC,QAAnB,EAA4B;AAC1B,YAAK,CAACD,eAAeC,QAAf,GAAwB,EAAzB,EAA6BC,IAA7B,MAAuC,CAACF,eAAeG,GAAf,GAAmB,EAApB,EAAwBD,IAAxB,EAA5C,EAA2E;AACzEjB,eAAKmB,KAAL;AACAnB,eAAKU,iBAAL,GAAyBK,eAAeK,aAAf,GAA+BpB,KAAKU,iBAApC,GAAyDK,eAAeK,aAAxE,GAAwFpB,KAAKU,iBAAtH;AACD;AACF;AACD,aAAOV,IAAP;AACH,KATO,EASN,EAACmB,OAAM,CAAP,EAAST,mBAAkB,CAA3B,EATM,CAAV;;AAWAN,iBAAaK,SAAb,GAAyBG,IAAIO,KAA7B;AACAf,iBAAaM,iBAAb,GAAiCE,IAAIF,iBAArC;;AAEAV,SAAKqB,IAAL,CAAUjB,YAAV;AACA,WAAOJ,IAAP;AACL,GArBW,EAsBZ,EAtBY,CAAd;;AAyBDJ,SAAOE,OAAP;AACC;;AAEFF,OAAK0B,IAAL,CAAU,UAASC,CAAT,EAAYC,CAAZ,EAAc;AACtB,WAAOA,EAAEf,SAAF,GAAYc,EAAEd,SAArB;AACD,GAFD;;AAIAb,OAAK6B,GAAL,CAAS,UAACC,IAAD,EAAMC,CAAN,EAAY;AAACD,SAAKE,IAAL,GAAaD,IAAE,CAAf,CAAmBD,KAAKG,GAAL,GAAWC,OAAOH,IAAE,CAAT,CAAX;AAAwB,GAAjE;;AAEA,SAAO/B,IAAP;AACP;;AAGH,SAASkC,MAAT,CAAgBH,CAAhB,EAAkB;AACd,UAAQA,CAAR;AACE,SAAK,CAAL;AACE,aAAO,CAAP;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACF,SAAK,CAAL;AACE,aAAO,CAAP;AACF,SAAK,CAAL;AACE,aAAO,GAAP;AACF,SAAK,CAAL;AACE,aAAO,GAAP;AACF;AACE,aAAO,CAAP;AAZJ;AAcD","file":"modules/mathComputations.js","sourcesContent":["\nexport default function processMathResults(data,accounts) {\n\n            if( data == null ){\n              return\n            }\n\n            var results = data.reduce(\n              (prev, current) => {\n                    let account = accounts[current.accountId]\n                    var currentEntry = { account : {email: current.accountId, firstname: account.firstName, surname: account.surname },  mathScore: 0, lastTimeSubmitted: current.endTimestamp }\n\n                    var res = current.surveyData.numbers.reduce(\n                        (prev, currentNumbers ) => {\n                          if (currentNumbers.solution){\n                            if ( (currentNumbers.solution+'').trim() == (currentNumbers.sum+'').trim()){\n                              prev.total++;\n                              prev.lastTimeSubmitted = currentNumbers.timeSubmitted > prev.lastTimeSubmitted ?  currentNumbers.timeSubmitted : prev.lastTimeSubmitted\n                            }\n                          }\n                          return prev\n                      },{total:0,lastTimeSubmitted:0})\n\n                    currentEntry.mathScore = res.total;\n                    currentEntry.lastTimeSubmitted = res.lastTimeSubmitted;\n\n                    prev.push(currentEntry)\n                    return prev;\n              },\n              []\n            );\n\n           data = results;\n            //debugger;\n\n          data.sort(function(a, b){\n            return b.mathScore-a.mathScore\n          });\n\n          data.map((item,i) => {item.rank = (i+1); item.pay = getPay(i+1);});\n\n          return data;\n  }\n\n\nfunction getPay(i){\n    switch (i) {\n      case 1:\n        return 4;\n      case 2:\n        return 2;\n      case 3:\n        return 1;\n      case 4:\n        return 0.5;\n      case 5:\n        return 0.5;\n      default:\n        return 0;\n    }\n  }\n"],"sourceRoot":"/source/"}