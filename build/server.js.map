{"version":3,"sources":["server.js"],"names":["nameMe","fs","require","privateKey","readFileSync","__dirname","certificate","https","credentials","key","cert","WebSocketServer","Server","express","compression","app","use","webTemplate","portWeb","parseInt","process","env","PORT_WEB","portSocket","PORT_SOCKET","webServer","createServer","appWSAdmin","req","res","writeHead","end","listen","wss","server","wssAdmin","static","send","console","log","updateControlRooms","action","result","next","payload","store","getState","memoryUsage","resolve","reject","clients","forEach","wsControlRoom","readyState","err","accounts","groups","broadcast","data","each","client","length","nombre","nameMeIterator","websocketManager","ws","parent","name","value","accountCode","Date","now","on","ii","onmessage","event","message","test","JSON","parse","type","email","dispatch"],"mappings":"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","file":"server.js","sourcesContent":["// Usando servidor seguro:\n// https://localhost:8000/\n// Open a websocket on the browser:\n// var exweb = new WebSocket(\"wss://localhost:8008\")\n// Imprimir mensajes del servidor:\n// exweb.onmessage = (a) => console.log(a)\nvar fs = require('fs');\nvar privateKey  = fs.readFileSync(__dirname + '/../sslcert/key.pem', 'utf8');\nvar certificate = fs.readFileSync(__dirname + '/../sslcert/cert.pem', 'utf8');\n\nvar https = require('https');\nvar credentials = {key: privateKey, cert: certificate};\n\nvar WebSocketServer = require('ws').Server;\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\nvar express = require('express')\nvar compression = require('compression')\nvar app = express()\n// compress all requests\napp.use(compression())\n\n// function that process the messages of type mutate.\nimport mutate from './websocket-message/server-mutate'\nimport query from './websocket-message/server-query'\n\n// Redux\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  accounts,\n  groups,\n} from './reducers/server';\n\nimport {\n  // Remove the WS from a store state\n  storeStateWithoutWebSocket,\n} from './actions/actions'\n\nimport {\n  swUpdateControlRoom,\n} from './websocket-message/server-actions'\n\nimport { port } from './config'\n\nvar webTemplate = require('../web-template');\n\nvar portWeb = parseInt(process.env.PORT_WEB) || port;\nvar portSocket = parseInt(process.env.PORT_SOCKET) || '3000';\n\n// Create the web server linked with the express app\nvar webServer = https.createServer(credentials, app);\n\n// Web server for websocket Admin connections\nvar appWSAdmin = https.createServer(\n  {\n    // providing server with  SSL key/cert\n    key: privateKey,\n    cert: certificate\n  },\n  ( req, res ) => {\n    res.writeHead(200);\n    res.end(\"All glory to WebSockets!\\n\");\n  }\n).listen( portWeb + 1 );\n\n// Link the web server port to the socket server port\nvar wss = new WebSocketServer({ server: webServer });\nvar wssAdmin = new WebSocketServer({ server: appWSAdmin });\n// debugger\napp.use(express.static('public'));\n\napp.use('/', function (req, res) {\n  res.send(webTemplate());\n});\n\nwebServer.listen( portWeb, () => console.log('server running at https://localhost:' + portWeb) );\n\n\n// middleware to send store updates to the admins\nconst updateControlRooms = store => next => action => {\n  console.log('dispatching', action)\n  let result = next(action)\n  let payload = storeStateWithoutWebSocket( store.getState() )\n  // console.log('UPDATE ControlRoom state' + payload )\n  console.log('MEMORY USAGE state' + JSON.stringify(process.memoryUsage()) )\n  // console.log('wssAdmin.clients.length> ' + wssAdmin.clients.length )\n\n  // transfer asynchronously\n  new Promise((resolve, reject) => {\n    wssAdmin.clients.forEach( (wsControlRoom) => {\n      // console.log('UPDATE ControlRoom state (promise) >' + payload)\n      // console.log('Stado del socket>> >' + wsControlRoom.readyState + ' < ID < ' + wsControlRoom.accountCode)\n      if (wsControlRoom.readyState != 1) {\n        return\n      }\n      try {\n        wsControlRoom.send(\n          JSON.stringify( swUpdateControlRoom( payload ) )\n        );\n        // console.log('Stado del socket>> >' + wsControlRoom.readyState + ' < ID < ' + wsControlRoom.accountCode)\n\n        resolve('transfer OK')\n      } catch(err) {\n        reject(err)\n      }\n    });\n  })\n\n  return result\n}\n\n// Note: this API requires redux@>=3.1.0\n// Create Redux store\nconst store = createStore(\n  combineReducers({\n    accounts,\n    groups,\n  }),\n  applyMiddleware(\n    thunk,\n    updateControlRooms\n  )\n);\n\nwss.broadcast = function broadcast(data) {\n  // debugger\n  wss.clients.forEach(function each(client) {\n    if (client.readyState != 1) {\n      console.log('socket on state: ' + client.readyState + ' prevented send')\n      return\n    }\n    console.log('wss.clients length: ' + wss.clients.length)\n    console.log('message sent to: ' + client.nombre)\n    client.send(data);\n  });\n};\n//\n// setInterval( () => wss.broadcast('mensaje importante de '), 2000 )\n// setTimeout( () => {\n// setInterval( () => {\n// console.log('broadcast')\n// wss.broadcast(\n//   JSON.stringify(\n//     { type: 'ACTION', action: 'ACCOUNT_REGISTER_ERROR', payload: 'cagada' }\n//   )\n// )\n// }, 3000)\n\nfunction* nameMe() {\n  yield* [\n    'maria',\n    'jose',\n    'jesus',\n    'burro',\n    'angel'\n  ];\n}\nvar nameMeIterator = nameMe()\n\nvar websocketManager = function (ws, parent) {\n    let name = nameMeIterator.next().value\n    console.log('started websocket client' + name);\n    // When user login will be the email\n    ws.name = name\n    ws.accountCode = Date.now()\n\n    // Add the Websocket to the list\n    // queryWebSocketList.push(ws);\n\n    // console.log('wsocket list length: ' + queryWebSocketList.length);\n\n    ws.send('Welcome!');\n\n    ws.on('close', () => {\n     console.log('stopping websocket client ' + ws.accountCode);\n     console.log('yo soy tu padre!!!!>>>  ' + parent.clients);\n\n       // Remove from\n\t// console.log(queryWebSocketList.indexOf(ws));\n\t// // Remove Websocket from queryWebSocketList\n\t// queryWebSocketList.splice(queryWebSocketList.indexOf(ws), 1);\n\t// console.log(ws.readyState);\n\t// console.log('wsocket list length: ' + queryWebSocketList.length);\n    } );\n\n    let ii = 0\n    ws.onmessage = async function(event) {\n    \t// Check the query.\n    \t// Process action.\n      // debugger\n      let message\n      // Check it is a JSON response\n      if ( /^\\{.*\\}$/.test(event.data) ) {\n        message = JSON.parse(event.data)\n      } else {\n        console.log( 'No protocol>>String>>>' + event.data )\n        return\n      }\n      console.log( '>>>' + JSON.stringify(event.data) )\n      // console.log( '>>>' + Object.keys(event) )\n      if (typeof message == 'string') return\n\n  \t  switch ( message.type ) {\n        // Process message of type MUTATE\n        case 'MUTATE':\n          await mutate({\n            action: message.action || '',\n            payload: message.payload || '',\n            ws: new WebSocketSimple(ws),\n            store\n          })\n          break;\n        // Process message of type QUERY\n        case 'QUERY':\n          await query({\n            action: message.action || '',\n            payload: message.payload || '',\n            ws: new WebSocketSimple(ws),\n            store\n          })\n          console.log('Query to the server')\n          console.log(message.type + ' ' + message.payload.email)\n          break;\n        // Process message of type ACTIONS\n        default:\n          // dispatch 'ACTIONS'\n          store.dispatch(message.payload)\n      }\n      console.log( 'ws.readyState>>>' + ws.readyState + ' < ID < ' + ws.accountCode )\n\n    }\n}\n\n// wss.on('connection', (ws) => websocketManager(ws));\nwss.on('connection', (ws) => websocketManager(ws, wss) );\nwssAdmin.on('connection', (ws) => websocketManager(ws, wssAdmin));\n"],"sourceRoot":"/source/"}