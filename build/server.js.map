{"version":3,"sources":["server.js"],"names":[],"mappings":"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","file":"server.js","sourcesContent":["// Usando servidor seguro:\n// https://localhost:8000/\n// Open a websocket on the browser:\n// var exweb = new WebSocket(\"wss://localhost:8008\")\n// Imprimir mensajes del servidor:\n// exweb.onmessage = (a) => console.log(a)\nvar fs = require('fs');\nvar privateKey  = fs.readFileSync(__dirname + '/../sslcert/key.pem', 'utf8');\nvar certificate = fs.readFileSync(__dirname + '/../sslcert/cert.pem', 'utf8');\n\nvar https = require('https');\nvar credentials = {key: privateKey, cert: certificate};\n\nvar WebSocketServer = require('ws').Server;\nvar express = require('express')\nvar compression = require('compression')\nvar app = express()\n// compress all requests\napp.use(compression())\n\n// function that process the messages of type mutate.\nimport mutate from './websock-message/server-mutate'\n\n// Redux\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport account from './reducers/server';\n\n// Note: this API requires redux@>=3.1.0\nconst store = createStore(\n  account,\n  applyMiddleware(thunk)\n);\n\nvar webTemplate = require('../web-template');\n\nvar portWeb = parseInt(process.env.PORT_WEB) || '8008';\nvar portSocket = parseInt(process.env.PORT_SOCKET) || '3000';\n\n// Create the web server linked with the express app\nvar webServer = https.createServer(credentials, app);\n\n// Link the web server port to the socket server port\nvar wss = new WebSocketServer({ server: webServer });\n\napp.use(express.static('public'));\n\napp.use('/', function (req, res) {\n  res.send(webTemplate());\n});\n\nwebServer.listen( portWeb, () => console.log('server running at https://localhost:' + portWeb) );\n\n// wss.broadcast = function broadcast(data) {\n//   debugger\n//\n//   wss.clients.forEach(function each(client) {\n//     console.log('wss.clients length: ' + wss.clients.length)\n//     console.log('message sent to: ' + client.nombre)\n//     client.send(data + client.nombre);\n//   });\n// };\n//\n// setInterval( () => wss.broadcast('mensaje importante de '), 2000 )\n\nfunction* nameMe() {\n  yield* [\n    'maria',\n    'jose',\n    'jesus',\n    'burro',\n    'angel'\n  ];\n}\nvar nameMeIterator = nameMe()\n\nwss.on('connection', function (ws) {\n    let name = nameMeIterator.next().value\n    console.log('started websocket client' + name);\n    // When user login will be the email\n    ws.name = name\n    ws.accountCode = null\n\n    // Add the Websocket to the list\n    // queryWebSocketList.push(ws);\n\n    // console.log('wsocket list length: ' + queryWebSocketList.length);\n\n    ws.send('Welcome!');\n\n    ws.on('close', () => {\n\t     console.log('stopping websocket client ' + ws.accountCode);\n       // Remove from\n\t// console.log(queryWebSocketList.indexOf(ws));\n\t// // Remove Websocket from queryWebSocketList\n\t// queryWebSocketList.splice(queryWebSocketList.indexOf(ws), 1);\n\t// console.log(ws.readyState);\n\t// console.log('wsocket list length: ' + queryWebSocketList.length);\n    } );\n\n    let ii = 0\n    ws.onmessage = async function(event) {\n    \t// Check the query.\n    \t// Process action.\n      // debugger\n      let message\n      // Check it is a JSON response\n      if ( /^\\{.*\\}$/.test(event.data) ) {\n        message = JSON.parse(event.data)\n      } else {\n        console.log( 'No protocol>>String>>>' + event.data )\n        return\n      }\n      console.log( '>>>' + JSON.stringify(event.data) )\n      // console.log( '>>>' + Object.keys(event) )\n      if (typeof message == 'string') return\n\n  \t  switch ( message.type ) {\n        // Process message of type MUTATE\n        case 'MUTATE':\n          await mutate({\n            action: message.action || '',\n            payload: message.payload || '',\n            ws,\n            store\n          })\n          break;\n        // Process message of type QUERY\n        case 'QUERY':\n          console.log(message.type + ' ' + message.payload.email)\n          break;\n        // Process message of type ACTIONS\n        default:\n          // dispatch 'ACTIONS'\n          store.dispatch(message.payload)\n      }\n      console.log( 'ws.readyState>>>' + ws.readyState )\n\n    }\n});\n"],"sourceRoot":"/source/"}