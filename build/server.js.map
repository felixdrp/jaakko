{"version":3,"sources":["server.js"],"names":["nameMe","fs","require","privateKey","readFileSync","__dirname","certificate","https","credentials","key","cert","WebSocketServer","Server","express","compression","app","use","store","accounts","groups","webTemplate","portWeb","parseInt","process","env","PORT_WEB","portSocket","PORT_SOCKET","webServer","createServer","wss","server","static","req","res","send","listen","console","log","broadcast","data","clients","forEach","each","client","length","nombre","nameMeIterator","on","ws","name","next","value","accountCode","ii","onmessage","event","message","test","JSON","parse","type","action","payload","email","dispatch","readyState"],"mappings":"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","file":"server.js","sourcesContent":["// Usando servidor seguro:\n// https://localhost:8000/\n// Open a websocket on the browser:\n// var exweb = new WebSocket(\"wss://localhost:8008\")\n// Imprimir mensajes del servidor:\n// exweb.onmessage = (a) => console.log(a)\nvar fs = require('fs');\nvar privateKey  = fs.readFileSync(__dirname + '/../sslcert/key.pem', 'utf8');\nvar certificate = fs.readFileSync(__dirname + '/../sslcert/cert.pem', 'utf8');\n\nvar https = require('https');\nvar credentials = {key: privateKey, cert: certificate};\n\nvar WebSocketServer = require('ws').Server;\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\nvar express = require('express')\nvar compression = require('compression')\nvar app = express()\n// compress all requests\napp.use(compression())\n\n// function that process the messages of type mutate.\nimport mutate from './websocket-message/server-mutate'\n\n// Redux\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  accounts,\n  groups,\n} from './reducers/server';\n\n// Note: this API requires redux@>=3.1.0\nconst store = createStore(\n  combineReducers({\n    accounts,\n    groups,\n  }),\n  applyMiddleware(thunk)\n);\n\nvar webTemplate = require('../web-template');\n\nvar portWeb = parseInt(process.env.PORT_WEB) || '8008';\nvar portSocket = parseInt(process.env.PORT_SOCKET) || '3000';\n\n// Create the web server linked with the express app\nvar webServer = https.createServer(credentials, app);\n\n// Link the web server port to the socket server port\nvar wss = new WebSocketServer({ server: webServer });\n\napp.use(express.static('public'));\n\napp.use('/', function (req, res) {\n  res.send(webTemplate());\n});\n\nwebServer.listen( portWeb, () => console.log('server running at https://localhost:' + portWeb) );\n\nwss.broadcast = function broadcast(data) {\n  // debugger\n  wss.clients.forEach(function each(client) {\n    console.log('wss.clients length: ' + wss.clients.length)\n    console.log('message sent to: ' + client.nombre)\n    client.send(data);\n  });\n};\n//\n// setInterval( () => wss.broadcast('mensaje importante de '), 2000 )\n// setTimeout( () => {\n// setInterval( () => {\n// console.log('broadcast')\n// wss.broadcast(\n//   JSON.stringify(\n//     { type: 'ACTION', action: 'ACCOUNT_REGISTER_ERROR', payload: 'cagada' }\n//   )\n// )\n// }, 3000)\n\nfunction* nameMe() {\n  yield* [\n    'maria',\n    'jose',\n    'jesus',\n    'burro',\n    'angel'\n  ];\n}\nvar nameMeIterator = nameMe()\n\nwss.on('connection', function (ws) {\n    let name = nameMeIterator.next().value\n    console.log('started websocket client' + name);\n    // When user login will be the email\n    ws.name = name\n    ws.accountCode = null\n\n    // Add the Websocket to the list\n    // queryWebSocketList.push(ws);\n\n    // console.log('wsocket list length: ' + queryWebSocketList.length);\n\n    ws.send('Welcome!');\n\n    ws.on('close', () => {\n\t     console.log('stopping websocket client ' + ws.accountCode);\n       // Remove from\n\t// console.log(queryWebSocketList.indexOf(ws));\n\t// // Remove Websocket from queryWebSocketList\n\t// queryWebSocketList.splice(queryWebSocketList.indexOf(ws), 1);\n\t// console.log(ws.readyState);\n\t// console.log('wsocket list length: ' + queryWebSocketList.length);\n    } );\n\n    let ii = 0\n    ws.onmessage = async function(event) {\n    \t// Check the query.\n    \t// Process action.\n      // debugger\n      let message\n      // Check it is a JSON response\n      if ( /^\\{.*\\}$/.test(event.data) ) {\n        message = JSON.parse(event.data)\n      } else {\n        console.log( 'No protocol>>String>>>' + event.data )\n        return\n      }\n      console.log( '>>>' + JSON.stringify(event.data) )\n      // console.log( '>>>' + Object.keys(event) )\n      if (typeof message == 'string') return\n\n  \t  switch ( message.type ) {\n        // Process message of type MUTATE\n        case 'MUTATE':\n          await mutate({\n            action: message.action || '',\n            payload: message.payload || '',\n            ws: new WebSocketSimple(ws),\n            store\n          })\n          break;\n        // Process message of type QUERY\n        case 'QUERY':\n          console.log(message.type + ' ' + message.payload.email)\n          break;\n        // Process message of type ACTIONS\n        default:\n          // dispatch 'ACTIONS'\n          store.dispatch(message.payload)\n      }\n      console.log( 'ws.readyState>>>' + ws.readyState )\n\n    }\n});\n"],"sourceRoot":"/source/"}