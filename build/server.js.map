{"version":3,"sources":["server.js"],"names":["fs","require","privateKey","readFileSync","__dirname","certificate","https","credentials","key","cert","WebSocketServer","Server","express","compression","app","use","webTemplate","portWeb","parseInt","process","env","PORT_WEB","portSocket","PORT_SOCKET","webServer","createServer","appWSAdmin","req","res","writeHead","end","listen","wss","server","wssAdmin","static","send","console","log","stream","createWriteStream","flags","autoClose","updateControlRooms","vervose","action","result","next","payload","store","getState","memoryUsage","task","type","write","resolve","reject","accountGroup","group","groups","accountList","forEach","state","accounts","client","ws","undefined","taskList","taskPointer","filter","element","e","clients","wsControlRoom","readyState","err","session","results","dispatch","broadcast","data","length","accountCode","websocketManager","name","Date","now","on","ii","onmessage","event","message","test","JSON","parse"],"mappings":"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","file":"server.js","sourcesContent":["// Usando servidor seguro:\n// https://localhost:8000/\n// Open a websocket on the browser:\n// var exweb = new WebSocket(\"wss://localhost:8008\")\n// Imprimir mensajes del servidor:\n// exweb.onmessage = (a) => console.log(a)\n// open server to debug on browser\n// node --inspect=9222 ./build/server.js\nvar fs = require('fs');\nvar privateKey  = fs.readFileSync(__dirname + '/../sslcert/key.pem', 'utf8');\nvar certificate = fs.readFileSync(__dirname + '/../sslcert/cert.pem', 'utf8');\n\nvar https = require('https');\nvar credentials = {key: privateKey, cert: certificate};\n\nvar WebSocketServer = require('ws').Server;\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\nvar express = require('express')\nvar compression = require('compression')\nvar app = express()\n// compress all requests\napp.use(compression())\n\n// function that process the messages of type mutate.\nimport mutate from './websocket-message/server-mutate'\nimport query from './websocket-message/server-query'\n\n// Redux\nimport { combineReducers, createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport {\n  accounts,\n  groups,\n  session,\n  results,\n  task,\n} from './reducers/server';\n\nimport {\n  STORE_SURVEY_INFO,\n  TASK_ADD_IDEA,\n  // Remove the WS from a store state\n  storeStateWithoutWebSocket,\n  sessionDataAdd,\n} from './actions/actions'\n\nimport {\n  swUpdateControlRoom,\n  wsTaskUpdateGroupIdeas,\n} from './websocket-message/server-actions'\n\nimport { port } from './config'\n\nimport sessionData from './session-data'\n\n// Testing with Redux initial state\nimport testInitData from '../data_oct_26.json'\n// import testInitData from '../prueba2.json'\n// import testInitData from '../linea.json'\n\nvar webTemplate = require('../web-template');\n\nvar portWeb = parseInt(process.env.PORT_WEB) || port;\nvar portSocket = parseInt(process.env.PORT_SOCKET) || '3000';\n\n// Create the web server linked with the express app\nvar webServer = https.createServer(credentials, app);\n\n// Web server for websocket Admin connections\nvar appWSAdmin = https.createServer(\n  {\n    // providing server with  SSL key/cert\n    key: privateKey,\n    cert: certificate\n  },\n  ( req, res ) => {\n    res.writeHead(200);\n    res.end(\"All glory to WebSockets!\\n\");\n  }\n).listen( portWeb + 1 );\n\n// Link the web server port to the socket server port\nvar wss = new WebSocketServer({ server: webServer });\nvar wssAdmin = new WebSocketServer({ server: appWSAdmin });\n// debugger\napp.use(express.static('public'));\n\napp.use('/', function (req, res) {\n  res.send(webTemplate());\n});\n\nwebServer.listen( portWeb, () => console.log('server running at https://localhost:' + portWeb) );\n\n// File to maintain a hard copy of the state\nvar stream = fs.createWriteStream('resultsBackup.txt', {flags: 'w', autoClose: true});\n\n// middleware to send store updates to the admins\nconst updateControlRooms = store => next => action => {\n  let vervose = true\n\n  if (vervose) {\n    console.log('dispatching', action)\n  }\n\n  let result = next(action)\n  let payload = storeStateWithoutWebSocket( store.getState() )\n\n  if (vervose) {\n    // console.log('UPDATE ControlRoom state' + payload )\n    console.log('MEMORY USAGE state' + JSON.stringify(process.memoryUsage()) )\n    console.log(JSON.stringify(store.getState().task, null, 4))\n    // console.log('wssAdmin.clients.length> ' + wssAdmin.clients.length )\n  }\n\n  if (action.type == STORE_SURVEY_INFO) {\n    // Write state to a file only when STORE_SURVEY_INFO action\n    stream.write( JSON.stringify(payload) + \"\\n\" )\n  }\n\n  // If new idea added transmit to the same group\n  if (action.type == TASK_ADD_IDEA) {\n    try {\n      new Promise((resolve, reject) => {\n        let accountGroup = action.payload.group\n        store.getState().groups[ accountGroup ].accountList.forEach(\n          client => {\n            let state = store.getState()\n\n            if (state.accounts[ client ].ws != undefined) {\n              state.accounts[ client ].ws.send(\n                wsTaskUpdateGroupIdeas(\n                  state.task.taskList[ state.task.taskPointer ].filter(\n                    // Filter the ideas of the same group.\n                    element => state.accounts[ client ].group == element.group\n                  )\n                )\n              )\n            }\n\n            console.log('send to group friends > ' + client)\n          }\n        )\n        resolve('transfer OK')\n      })\n    } catch (e) {\n      console.log(e)\n    }\n  }\n\n  // transfer asynchronously to all the admins\n  new Promise((resolve, reject) => {\n    wssAdmin.clients.forEach( (wsControlRoom) => {\n      // console.log('UPDATE ControlRoom state (promise) >' + payload)\n      // console.log('Stado del socket>> >' + wsControlRoom.readyState + ' < ID < ' + wsControlRoom.accountCode)\n      if (wsControlRoom.readyState != 1) {\n        return\n      }\n      try {\n        wsControlRoom.send(\n          JSON.stringify( swUpdateControlRoom( payload ) )\n        );\n        // console.log('Stado del socket>> >' + wsControlRoom.readyState + ' < ID < ' + wsControlRoom.accountCode)\n\n        resolve('transfer OK')\n      } catch(err) {\n        reject(err)\n      }\n    });\n  })\n\n  return result\n}\n\n// Note: this API requires redux@>=3.1.0\n// Create Redux store\nconst store = createStore(\n  combineReducers({\n    accounts,\n    groups,\n    // Session survey questions\n    session,\n    // Results to the surveys\n    results,\n    task,\n  }),\n  testInitData,\n  applyMiddleware(\n    thunk,\n    updateControlRooms\n  )\n);\n\n// Add the survey questions data to the redux store\nstore.dispatch( sessionDataAdd(sessionData) )\n// console.log('~~~~ session estas ahi?')\n// console.log(store.getState())\n\nwss.broadcast = function broadcast(data) {\n  // debugger\n  wss.clients.forEach( (client) => {\n    if (client.readyState != 1) {\n      console.log('socket on state: ' + client.readyState + ' prevented send')\n      return\n    }\n    console.log('wss.clients length: ' + wss.clients.length)\n    console.log('message sent to: ' + client.accountCode)\n    client.send(data);\n  });\n};\n//\n// setInterval( () => wss.broadcast('mensaje importante de '), 2000 )\n// setTimeout( () => {\n// // setInterval( () => {\n// debugger\n// console.log('broadcast')\n// wss.broadcast(\n//   JSON.stringify(\n//     { type: 'ACTION', action: 'ACCOUNT_REGISTER_ERROR', payload: 'cagada' }\n//   )\n// )\n// }, 8000)\n\n\nvar websocketManager = function (ws) {\n    let name = 'temporal'\n    console.log('started websocket client' + name);\n    // When user login will be the email\n    ws.name = name\n    ws.accountCode = Date.now()\n\n\n    // Add the Websocket to the list\n    // queryWebSocketList.push(ws);\n\n    // console.log('wsocket list length: ' + queryWebSocketList.length);\n\n    ws.send('Welcome!');\n\n    ws.on('close', () => {\n     console.log('stopping websocket client ' + ws.accountCode);\n    //  console.log('yo soy tu padre!!!!>>>  ' + parent.clients);\n\n       // Remove from\n\t// console.log(queryWebSocketList.indexOf(ws));\n\t// // Remove Websocket from queryWebSocketList\n\t// queryWebSocketList.splice(queryWebSocketList.indexOf(ws), 1);\n\t// console.log(ws.readyState);\n\t// console.log('wsocket list length: ' + queryWebSocketList.length);\n    } );\n\n    let ii = 0\n    ws.onmessage = async function(event) {\n    \t// Check the query.\n    \t// Process action.\n      // debugger\n      let message\n      // Check it is a JSON response\n      if ( /^\\{.*\\}$/.test(event.data) ) {\n        message = JSON.parse(event.data)\n      } else {\n        console.log( 'No protocol>>String>>>' + event.data )\n        return\n      }\n      console.log( '>>>' + JSON.stringify(event.data) )\n      // console.log( '>>>' + Object.keys(event) )\n      if (typeof message == 'string') return\n\n  \t  switch ( message.type ) {\n        // Process message of type MUTATE\n        case 'MUTATE':\n          await mutate(\n            {\n              action: message.action || '',\n              payload: message.payload || '',\n              ws: new WebSocketSimple(ws),\n              store,\n            },\n            wss\n          )\n          break;\n        // Process message of type QUERY\n        case 'QUERY':\n          await query({\n            action: message.action || '',\n            payload: message.payload || '',\n            ws: new WebSocketSimple(ws),\n            store\n          })\n          console.log('Query to the server')\n          console.log(message.type)\n          console.log(message)\n          break;\n        // Process message of type ACTIONS\n        default:\n          // dispatch 'ACTIONS'\n          store.dispatch(message.payload)\n      }\n      console.log( 'ws.readyState>>>' + ws.readyState + ' < ID < ' + ws.accountCode )\n\n    }\n}\n\n// wss.on('connection', (ws) => websocketManager(ws));\nwss.on('connection', (ws) => websocketManager(ws) );\nwssAdmin.on('connection', (ws) => websocketManager(ws) );\n"]}