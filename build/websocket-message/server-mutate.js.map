{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","nextStep","account","result","getState","dispatch","surveyPointer","accountId","groupId","accounts","group","groups","accountList","map","tempAccount","console","log","undefined","send","url","options","payloadResponse","firstName","surename","email","password","reEnterPassword","error","message","type","accountCode","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","mutate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAYA;;AAsBA;;AAMA;;AAEA;;AACA;;;;AAEA;;;AAGA;;;;;;;;;;AAfA;AAnCA;AACA;;wEA2De;AAAA;;AAAA,QAAwBA,MAAxB,SAAwBA,MAAxB;AAAA,QAAgCC,OAAhC,SAAgCA,OAAhC;AAAA,QAAyCC,EAAzC,SAAyCA,EAAzC;AAAA,QAA6CC,KAA7C,SAA6CA,KAA7C;;AAAA,0CAKJC,mDALI,EAwBJC,WAxBI,EAgCJC,sBAhCI,EAwCJC,iBAxCI,EAkDJC,QAlDI;;AAAA;AAAA;AAAA;AAAA;AAkDJA,oBAlDI,YAkDJA,QAlDI,CAkDKC,OAlDL,EAkDc;AACzB,kBAAIC,SAASP,MAAMQ,QAAN,EAAb;AACAR,oBAAMS,QAAN,CAAgB,wDAAoBH,OAApB,IAA6BI,eAAe,mBAAmBJ,OAAnB,GAA4BA,QAAQI,aAAR,GAAwB,CAApD,GAAuD,IAAnG,IAAhB;AACD,aArDY;;AAwCJN,6BAxCI,YAwCJA,iBAxCI,CAwCcO,SAxCd,EAwCyBC,OAxCzB,EAwCkCZ,KAxClC,EAwCyC;AACpD,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACA,kBAAKD,OAAOM,QAAP,CAAgBF,SAAhB,EAA2BG,KAA3B,IAAoC,YAAzC,EAAwD;AACtDd,sBAAMS,QAAN,CAAgB,+BAAkBG,OAAlB,EAA2BD,SAA3B,CAAhB;AACAX,sBAAMS,QAAN,CAAgB,wDAAoBF,OAAOM,QAAP,CAAgBF,SAAhB,CAApB,IAAgDG,OAAOF,OAAvD,IAAhB;AACD,eAHD,MAGO;AACLZ,sBAAMS,QAAN,CAAgB,kCAAqBE,SAArB,EAAgCC,OAAhC,CAAhB;AACD;AACF,aAhDY;;AAgCJT,kCAhCI,YAgCJA,sBAhCI,CAgCmBQ,SAhCnB,EAgC8BX,KAhC9B,EAgCqC;AAChD,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACA;AACAR,oBAAMS,QAAN,CAAgB,kCAAoBF,OAAOM,QAAP,CAAgBF,SAAhB,EAA2BG,KAA/C,EAAsDH,SAAtD,CAAhB;AACA;AACAX,oBAAMS,QAAN,CAAgB,wDAAoBF,OAAOM,QAAP,CAAgBF,SAAhB,CAApB,IAAgDG,OAAO,YAAvD,IAAhB;AACD,aAtCY;;AAwBJZ,uBAxBI,YAwBJA,WAxBI,CAwBQU,OAxBR,EAwBiBZ,KAxBjB,EAwBwB;AACnC,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACAD,qBAAOQ,MAAP,CAAcH,OAAd,EAAuBI,WAAvB,CAAmCC,GAAnC,CACE,UAACN,SAAD;AAAA,uBAAeX,MAAMS,QAAN,CAAgB,wDAAoBF,OAAOM,QAAP,CAAgBF,SAAhB,CAApB,IAAgDG,OAAO,YAAvD,IAAhB,CAAf;AAAA,eADF;AAGAd,oBAAMS,QAAN,CAAgB,2BAAcG,OAAd,CAAhB;AACD,aA9BY;;AAKJX,+DALI,YAKJA,mDALI,CAKgDK,OALhD,EAKyD;AACpE,kBAAIY,oBAAJ;AACA;AACAlB,oBAAMS,QAAN,CAAgB,qDAAgBH,OAAhB,IAAyBQ,OAAO,YAAhC,IAAhB;AACAK,sBAAQC,GAAR,CAAY,YAAZ;;AAEA;AACAF,uDAAkBZ,OAAlB,IAA2BP,IAAIsB,SAA/B;AACA,qBAAOH,YAAYnB,EAAnB;AACAA,iBAAGuB,IAAH,CAAU,iCAAahB,OAAb,CAAV;AACAa,sBAAQC,GAAR,CAAY,YAAZ;;AAEA;AACArB,iBAAGuB,IAAH,CACE,+BAAW,EAAEC,KAAK,kBAAP,EAA2BC,SAAS,EAApC,EAAX,CADF;AAGAL,sBAAQC,GAAR,CAAY,YAAZ;AACD,aAtBY;;AACTK,2BADS,WAETlB,MAFS,WAGTD,OAHS;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAuDLT,MAvDK;AAAA;AAAA;;AAAA;AAAA;AAAA,6BA0DM,kCACb;AACE6B,mCAAW5B,QAAQ4B,SADrB;AAEEC,kCAAU7B,QAAQ6B,QAFpB;AAGEC,+BAAO9B,QAAQ8B,KAHjB;AAIEC,kCAAU/B,QAAQ+B,QAJpB;AAKEC,yCAAiBhC,QAAQ+B;AAL3B,uBADa,wBA1DN;;AAAA;AA0DTtB,4BA1DS;;AAAA,4BAqEL,QAAOA,MAAP,uDAAOA,MAAP,MAAiB,QAAjB,IAA6B,aAAaA,MArErC;AAAA;AAAA;AAAA;;AAsEP;AACA;AACAY,8BAAQY,KAAR,CAAcxB,OAAOyB,OAArB;AACA,0BACEzB,OAAOyB,OAAP,KAAmB,iCAAnB,IACAzB,OAAOyB,OAAP,KAAmB,4CAFrB,EAGE;AACAP,0CAAkB,EAAEG,OAAO,wBAAT,EAAlB;AACD,uBALD,MAKO,IACLrB,OAAOyB,OAAP,KAAmB,oCADd,EAEL;AACAP,0CAAkB,EAAEI,UAAU,2BAAZ,EAAlB;AACD,uBAJM,MAIA,IACLtB,OAAOyB,OAAP,KAAmB,qBADd,EAEL;AACAP,0CAAkB,EAAEG,OAAO,+BAAT,EAAlB;AACD;AACD;AACA7B,yBAAGuB,IAAH,CACE;AACEW,mDADF;AAEEpC,qEAFF;AAGEC,iCAAS2B;AAHX,uBADF;AAxFO;AAAA;AAAA;;AAAA;AAiGT;AACA;AACA;AACA;AACA;AACA1B,yBAAGmC,WAAH,GAAiBpC,QAAQ8B,KAAzB;;AAEAtB,gCAAU;AACRsB,+BAAO9B,QAAQ8B,KADP;AAERF,mCAAW5B,QAAQ4B,SAFX;AAGRC,kCAAU7B,QAAQ6B,QAHV;AAIRQ,+BAAO5B,MAJC;AAKRR;AALQ,uBAAV;AAOAE,0EAAoDK,OAApD;AACA;AAhHS;AAAA,2BAiHF;AAjHE;;AAAA;AAAA;AAAA,6BAqHM,gCAAa;AAC1BsB,+BAAO9B,QAAQ8B,KADW;AAE1BC,kCAAU/B,QAAQ+B;AAFQ,uBAAb,CArHN;;AAAA;AAqHTtB,4BArHS;;AAyHTY,8BAAQC,GAAR,CAAYb,MAAZ;;AAzHS,4BA2HL,QAAOA,MAAP,uDAAOA,MAAP,MAAiB,QAAjB,IAA6B,aAAaA,MA3HrC;AAAA;AAAA;AAAA;;AA4HP;AACA;AACAY,8BAAQY,KAAR,CAAcxB,OAAOyB,OAArB;AACA,0BACEzB,OAAOyB,OAAP,KAAmB,iCAAnB,IACAzB,OAAOyB,OAAP,KAAmB,4CAFrB,EAGE;AACAP,0CAAkB,EAAEG,OAAO,wBAAT,EAAlB;AACD,uBALD,MAKO,IACLrB,OAAOyB,OAAP,KAAmB,qBADd,EAEL;AACAP,0CAAkB,EAAEI,UAAU,2BAAZ,EAAlB;AACD,uBAJM,MAIA,IACLtB,OAAOyB,OAAP,KAAmB,0BADd,EAEL;AACAP,0CAAkB,EAAEG,OAAO,mCAAT,EAAlB;AACD;AACD;AACA7B,yBAAGuB,IAAH,CACE;AACEW,mDADF;AAEEpC,kEAFF;AAGEC,iCAAS2B;AAHX,uBADF;AA9IO;AAAA;AAAA;;AAAA;AAuJT;AACA;AACA1B,yBAAGmC,WAAH,GAAiBpC,QAAQ8B,KAAzB;;AAEAtB,gCAAU;AACRsB,+BAAO9B,QAAQ8B,KADP;AAERF,mCAAWnB,OAAOmB,SAFV;AAGRC,kCAAUpB,OAAOoB,QAHT;AAIRQ,+BAAO5B,OAAO4B,KAJN;AAKRpC,4BAAIA;AALI,uBAAV;;AAQAoB,8BAAQC,GAAR,CAAY,YAAZ;AACAnB,0EAAoDK,OAApD;AACAa,8BAAQC,GAAR,CAAY,YAAZ;AACAD,8BAAQC,GAAR,CAAYpB,MAAMQ,QAAN,EAAZ;AACA;AACA;AAxKS;AAAA,2BAyKF;AAzKE;;AAAA;AA4KTR,4BAAMS,QAAN,CAAgB,wBAAU;AACvBG,iCAASd,QAAQsC,IAAR,IAAgBC,KAAKC,GAAL,EADF;AAEvBL,8BAAMnC,QAAQmC,IAAR,IAAgB,CAFC;AAGvBM,8BAAMzC,QAAQyC,IAAR,IAAgB;AAHC,uBAAV,CAAhB;AA5KS;AAAA,2BAiLF;AAjLE;;AAAA;AAoLThC,+BAASP,MAAMQ,QAAN,EAAT;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,kCAAYJ,QAAQc,OAApB,EAA6BZ,KAA7B;AACA;AACA;AACA;AACA;AA/LS;AAAA,2BAgMF;AAhME;;AAAA;AAAA;AAAA,2BAmMF;AAnME;;AAAA;AAAA;AAAA,2BAsMF;AAtME;;AAAA;AAyMTO,+BAASP,MAAMQ,QAAN,EAAT;AACAV,8BAAQ0C,QAAR,CAAiBvB,GAAjB,CACE,UAACN,SAAD,EAAe;AACbP,0CAAkBO,SAAlB,EAA6Bb,QAAQc,OAArC,EAA8CZ,KAA9C;AACD,uBAHH;AA1MS;AAAA,2BA+MF;AA/ME;;AAAA;AAkNTO,+BAASP,MAAMQ,QAAN,EAAT;AACAV,8BAAQ0C,QAAR,CAAiBvB,GAAjB,CACE,UAACN,SAAD,EAAe;AACbR,+CAAuBQ,SAAvB,EAAkCX,KAAlC;AACD,uBAHH;AAnNS;AAAA,2BAwNF;AAxNE;;AAAA;AA2NTO,+BAASP,MAAMQ,QAAN,EAAT;AACA,0BAAID,OAAOM,QAAP,CAAgBf,QAAQa,SAAxB,CAAJ,EAAwC;AACtCR,+CAAuBL,QAAQa,SAA/B,EAA0CX,KAA1C;AACD;AA9NQ;AAAA,2BA+NF;AA/NE;;AAAA;AAkOTO,+BAASP,MAAMQ,QAAN,EAAT;;AAEA;AACA,6BAAOV,QAAQ2C,cAAR,IAA0BlC,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBG,MAApD,EAA4D;AAC1D,4BAAI5C,QAAQ2C,cAAR,GAAyBlC,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBG,MAAhD,EAAwD;AACtD;AACA1C,gCAAMS,QAAN,CAAgB,wBAAU;AACxBG,qCAASd,QAAQsC,IAAR,IAAgBC,KAAKC,GAAL,EADD;AAExB;AACAL,kCAAMnC,QAAQmC,IAAR,IAAgB1B,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBG,MAAnB,GAA4B,CAH1B;AAIxBH,kCAAMzC,QAAQyC,IAAR,IAAgB;AAJE,2BAAV,CAAhB;AAMD,yBARD,MAQO;AACL;AACArC,sCAAYK,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBhC,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBG,MAAnB,GAA4B,CAA/C,CAAZ,EAA+D1C,KAA/D;AACD;AACF;;AAED;;AACS2C,gCArPA,GAqPT,SAASA,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,4BAAIC,QAAQC,KAAKC,KAAL,CAAWH,IAAED,CAAb,CAAZ;AACA,4BAAIK,2BAA2B,EAA/B;;AAEA,6BAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,CAApB,EAAuBM,GAAvB,EAA4B;AAC1BD,mDAAyBE,IAAzB,CAA8BL,KAA9B;AACD;;AAED,6BAAK,IAAII,KAAI,CAAb,EAAgBA,KAAIL,IAAED,CAAtB,EAAyBM,IAAzB,EAA8B;AAC5BD,mDAAyBC,EAAzB,KAA+B,CAA/B;AACD;;AAED,+BAAOD,wBAAP;AACD,uBAlQQ;;AAqQHA,8CArQG,GAqQwBN,WAAW7C,QAAQ2C,cAAnB,EAAmClC,OAAOM,QAAP,CAAgB0B,IAAhB,CAAqBG,MAAxD,CArQxB;AAsQH/B,+BAtQG,WAsQQG,KAtQR,WAsQeF,OAtQf;AAuQP;;AACIwC,4BAxQG,GAwQM,IAxQN;;AA0QP;;AACA,2BAASF,CAAT,GAAa,CAAb,EAAgBA,IAAIpD,QAAQ2C,cAA5B,EAA4CS,GAA5C,EAAiD;AAC/CpC,gCAAQP,OAAOQ,MAAP,CAAeR,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBW,CAAnB,CAAf,CAAR;AACA,+BAAOpC,MAAME,WAAN,CAAkB0B,MAAlB,GAA2BO,yBAAyBC,CAAzB,CAAlC,EAA+D;AAC7D/C;AACE;AACAW,gCAAME,WAAN,CAAmBF,MAAME,WAAN,CAAkB0B,MAAlB,GAA2B,CAA9C,CAFF,EAGE1C,KAHF;AAKD;AACF;AACD;AACSkD,yBAtRF,GAsRM,CAtRN;;AAAA;AAAA,4BAsRSA,MAAIpD,QAAQ2C,cAtRrB;AAAA;AAAA;AAAA;;AAuRL7B,gCAAUL,OAAOQ,MAAP,CAAcwB,IAAd,CAAmBW,GAAnB,CAAV;AACApC,8BAAQP,OAAOQ,MAAP,CAAeH,OAAf,CAAR;;AAxRK;AAAA,4BAyREE,MAAME,WAAN,CAAkB0B,MAAlB,GAA2BO,yBAAyBC,GAAzB,CAzR7B;AAAA;AAAA;AAAA;;AAAA,4BA2RCE,UAAU,IA3RX;AAAA;AAAA;AAAA;;AA4RD;AACAzC,kCAAY,EAAZ;AA7RC;AAAA;AAAA;AAAA;AA8RD,kEAAgBJ,OAAOM,QAAP,CAAgB0B,IAAhC,qGAAsC;AAA7Bc,2BAA6B;;AACpC,4BAAI9C,OAAOM,QAAP,CAAgBwC,GAAhB,EAAqBvC,KAArB,IAA8B,YAAlC,EAAgD;AAC9CH,oCAAUwC,IAAV,CAAgBE,GAAhB;AACD;AACF;;AAlSA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAoSDjD,wCACEO,UAAWoC,KAAKC,KAAL,CAAYD,KAAKK,MAAL,KAAgBzC,UAAU+B,MAAtC,CAAX,CADF,EAEE9B,OAFF,EAGEZ,KAHF;AApSC;AAAA;;AAAA;AA0SD;AA1SC;AAAA;AAAA;AAAA;AAAA,8DA2SeO,OAAOM,QAAP,CAAgB0B,IA3S/B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2SQc,0BA3SR;;AAAA,4BA4SK9C,OAAOM,QAAP,CAAgBwC,IAAhB,EAAqBvC,KAArB,IAA8B,YA5SnC;AAAA;AAAA;AAAA;;AA6SGH,kCAAY0C,IAAZ;AA7SH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAkTDjD,wCACEO,SADF,EAEEC,OAFF,EAGEZ,KAHF;;AAlTC;AAAA;AAAA;;AAAA;AAsRqCkD,2BAtRrC;AAAA;AAAA;;AAAA;AAAA;AAAA,2BA4TF;AA5TE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeI,M;;;;SAAAA,M;;;AAnB9B;;;AA5BA","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n} from './server-actions'\n\n// Redux server actions\nimport {\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // Go to WaitSync to start session\n    ws.send(\n      wsGotoPage({ url: '/survey/waitSync', options: {} })\n    )\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  function nextStep(account) {\n    let result = store.getState()\n    store.dispatch( accountsUpdate({ ...account, surveyPointer: 'surveyPointer' in account? account.surveyPointer + 1: null }) )\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n  }\n}\n"],"sourceRoot":"/source/"}