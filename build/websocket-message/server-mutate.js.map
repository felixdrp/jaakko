{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","nextStep","accountId","result","getState","account","accounts","accountSessionPointer","surveyPointer","dispatch","send","url","session","surveyPath","type","options","groupId","group","groups","accountList","map","tempAccount","console","log","undefined","email","payloadResponse","firstName","surename","password","reEnterPassword","error","message","accountCode","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","mutate"],"mappings":"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","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n} from './server-actions'\n\n// Redux server actions\nimport {\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// Get an url from an survey-type\nimport { resolveSurveyURL } from '../components/survey/survey-types'\n\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // // Go to WaitSync to start session\n    // ws.send(\n    //   wsGotoPage({ url: '/survey/waitSync', options: {} })\n    // )\n\n    nextStep(account.email)\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  function nextStep(accountId) {\n    // Get the session survey\n    let result = store.getState()\n    let account = result.accounts[accountId]\n    let accountSessionPointer = 'surveyPointer' in account? account.surveyPointer + 1:  0\n    store.dispatch( accountsUpdate({ ...account, surveyPointer: accountSessionPointer }) )\n    // Go to WaitSync to start session\n    ws.send(\n      wsGotoPage({ url: resolveSurveyURL( result.session.surveyPath[ accountSessionPointer ].type ), options: {} })\n    )\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n  }\n}\n"],"sourceRoot":"/source/"}