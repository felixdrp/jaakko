{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","accountId","groupId","result","getState","accounts","group","dispatch","groups","accountList","map","account","tempAccount","console","log","undefined","send","url","options","payloadResponse","firstName","surename","email","password","reEnterPassword","error","message","type","accountCode","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","mutate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAYA;;AAsBA;;AAMA;;AAEA;;AACA;;;;AAEA;;;AAGA;;;;;;;;;;AAfA;AAnCA;AACA;;wEA2De;AAAA;;AAAA,QAAwBA,MAAxB,SAAwBA,MAAxB;AAAA,QAAgCC,OAAhC,SAAgCA,OAAhC;AAAA,QAAyCC,EAAzC,SAAyCA,EAAzC;AAAA,QAA6CC,KAA7C,SAA6CA,KAA7C;;AAAA,0CAKJC,mDALI,EAwBJC,WAxBI,EAgCJC,sBAhCI,EAwCJC,iBAxCI;;AAAA;AAAA;AAAA;AAAA;AAwCJA,6BAxCI,YAwCJA,iBAxCI,CAwCcC,SAxCd,EAwCyBC,OAxCzB,EAwCkCN,KAxClC,EAwCyC;AACpD,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACA,kBAAKD,OAAOE,QAAP,CAAgBJ,SAAhB,EAA2BK,KAA3B,IAAoC,YAAzC,EAAwD;AACtDV,sBAAMW,QAAN,CAAgB,+BAAkBL,OAAlB,EAA2BD,SAA3B,CAAhB;AACAL,sBAAMW,QAAN,CAAgB,wDAAoBJ,OAAOE,QAAP,CAAgBJ,SAAhB,CAApB,IAAgDK,OAAOJ,OAAvD,IAAhB;AACD,eAHD,MAGO;AACLN,sBAAMW,QAAN,CAAgB,kCAAqBN,SAArB,EAAgCC,OAAhC,CAAhB;AACD;AACF,aAhDY;;AAgCJH,kCAhCI,YAgCJA,sBAhCI,CAgCmBE,SAhCnB,EAgC8BL,KAhC9B,EAgCqC;AAChD,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACA;AACAR,oBAAMW,QAAN,CAAgB,kCAAoBJ,OAAOE,QAAP,CAAgBJ,SAAhB,EAA2BK,KAA/C,EAAsDL,SAAtD,CAAhB;AACA;AACAL,oBAAMW,QAAN,CAAgB,wDAAoBJ,OAAOE,QAAP,CAAgBJ,SAAhB,CAApB,IAAgDK,OAAO,YAAvD,IAAhB;AACD,aAtCY;;AAwBJR,uBAxBI,YAwBJA,WAxBI,CAwBQI,OAxBR,EAwBiBN,KAxBjB,EAwBwB;AACnC,kBAAIO,SAASP,MAAMQ,QAAN,EAAb;AACAD,qBAAOK,MAAP,CAAcN,OAAd,EAAuBO,WAAvB,CAAmCC,GAAnC,CACE,UAACT,SAAD;AAAA,uBAAeL,MAAMW,QAAN,CAAgB,wDAAoBJ,OAAOE,QAAP,CAAgBJ,SAAhB,CAApB,IAAgDK,OAAO,YAAvD,IAAhB,CAAf;AAAA,eADF;AAGAV,oBAAMW,QAAN,CAAgB,2BAAcL,OAAd,CAAhB;AACD,aA9BY;;AAKJL,+DALI,YAKJA,mDALI,CAKgDc,OALhD,EAKyD;AACpE,kBAAIC,oBAAJ;AACA;AACAhB,oBAAMW,QAAN,CAAgB,qDAAgBI,OAAhB,IAAyBL,OAAO,YAAhC,IAAhB;AACAO,sBAAQC,GAAR,CAAY,YAAZ;;AAEA;AACAF,uDAAkBD,OAAlB,IAA2BhB,IAAIoB,SAA/B;AACA,qBAAOH,YAAYjB,EAAnB;AACAA,iBAAGqB,IAAH,CAAU,iCAAaL,OAAb,CAAV;AACAE,sBAAQC,GAAR,CAAY,YAAZ;;AAEA;AACAnB,iBAAGqB,IAAH,CACE,+BAAW,EAAEC,KAAK,kBAAP,EAA2BC,SAAS,EAApC,EAAX,CADF;AAGAL,sBAAQC,GAAR,CAAY,YAAZ;AACD,aAtBY;;AACTK,2BADS,WAEThB,MAFS,WAGTQ,OAHS;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oCAkDLlB,MAlDK;AAAA;AAAA;;AAAA;AAAA;AAAA,6BAqDM,kCACb;AACE2B,mCAAW1B,QAAQ0B,SADrB;AAEEC,kCAAU3B,QAAQ2B,QAFpB;AAGEC,+BAAO5B,QAAQ4B,KAHjB;AAIEC,kCAAU7B,QAAQ6B,QAJpB;AAKEC,yCAAiB9B,QAAQ6B;AAL3B,uBADa,wBArDN;;AAAA;AAqDTpB,4BArDS;;AAAA,4BA+DL,aAAaA,MA/DR;AAAA;AAAA;AAAA;;AAgEP;AACA;AACAU,8BAAQY,KAAR,CAActB,OAAOuB,OAArB;AACA,0BACEvB,OAAOuB,OAAP,KAAmB,iCAAnB,IACAvB,OAAOuB,OAAP,KAAmB,4CAFrB,EAGE;AACAP,0CAAkB,EAAEG,OAAO,wBAAT,EAAlB;AACD,uBALD,MAKO,IACLnB,OAAOuB,OAAP,KAAmB,oCADd,EAEL;AACAP,0CAAkB,EAAEI,UAAU,2BAAZ,EAAlB;AACD,uBAJM,MAIA,IACLpB,OAAOuB,OAAP,KAAmB,qBADd,EAEL;AACAP,0CAAkB,EAAEG,OAAO,+BAAT,EAAlB;AACD;AACD;AACA3B,yBAAGqB,IAAH,CACE;AACEW,mDADF;AAEElC,qEAFF;AAGEC,iCAASyB;AAHX,uBADF;AAlFO;AAAA;AAAA;;AAAA;AA2FT;AACA;AACA;AACA;AACA;AACAxB,yBAAGiC,WAAH,GAAiBlC,QAAQ4B,KAAzB;;AAEAX,gCAAU;AACRW,+BAAO5B,QAAQ4B,KADP;AAERF,mCAAW1B,QAAQ0B,SAFX;AAGRC,kCAAU3B,QAAQ2B,QAHV;AAIRQ,+BAAO1B,MAJC;AAKRR;AALQ,uBAAV;AAOAE,0EAAoDc,OAApD;AACA;AA1GS;AAAA,2BA2GF;AA3GE;;AAAA;AAAA;AAAA,6BA+GM,gCAAa;AAC1BW,+BAAO5B,QAAQ4B,KADW;AAE1BC,kCAAU7B,QAAQ6B;AAFQ,uBAAb,CA/GN;;AAAA;AA+GTpB,4BA/GS;;AAmHTU,8BAAQC,GAAR,CAAYX,MAAZ;;AAnHS,4BAqHL,aAAaA,MArHR;AAAA;AAAA;AAAA;;AAsHP;AACA;AACAU,8BAAQY,KAAR,CAActB,OAAOuB,OAArB;AACA,0BACEvB,OAAOuB,OAAP,KAAmB,iCAAnB,IACAvB,OAAOuB,OAAP,KAAmB,4CAFrB,EAGE;AACAP,0CAAkB,EAAEG,OAAO,wBAAT,EAAlB;AACD,uBALD,MAKO,IACLnB,OAAOuB,OAAP,KAAmB,qBADd,EAEL;AACAP,0CAAkB,EAAEI,UAAU,2BAAZ,EAAlB;AACD,uBAJM,MAIA,IACLpB,OAAOuB,OAAP,KAAmB,0BADd,EAEL;AACAP,0CAAkB,EAAEG,OAAO,mCAAT,EAAlB;AACD;AACD;AACA3B,yBAAGqB,IAAH,CACE;AACEW,mDADF;AAEElC,kEAFF;AAGEC,iCAASyB;AAHX,uBADF;AAxIO;AAAA;AAAA;;AAAA;AAiJT;AACA;AACAxB,yBAAGiC,WAAH,GAAiBlC,QAAQ4B,KAAzB;;AAEAX,gCAAU;AACRW,+BAAO5B,QAAQ4B,KADP;AAERF,mCAAWjB,OAAOiB,SAFV;AAGRC,kCAAUlB,OAAOkB,QAHT;AAIRQ,+BAAO1B,OAAO0B,KAJN;AAKRlC,4BAAIA;AALI,uBAAV;;AAQAkB,8BAAQC,GAAR,CAAY,YAAZ;AACAjB,0EAAoDc,OAApD;AACAE,8BAAQC,GAAR,CAAY,YAAZ;AACAD,8BAAQC,GAAR,CAAYlB,MAAMQ,QAAN,EAAZ;AACA;AACA;AAlKS;AAAA,2BAmKF;AAnKE;;AAAA;AAsKTR,4BAAMW,QAAN,CAAgB,wBAAU;AACvBL,iCAASR,QAAQoC,IAAR,IAAgBC,KAAKC,GAAL,EADF;AAEvBL,8BAAMjC,QAAQiC,IAAR,IAAgB,CAFC;AAGvBM,8BAAMvC,QAAQuC,IAAR,IAAgB;AAHC,uBAAV,CAAhB;AAtKS;AAAA,2BA2KF;AA3KE;;AAAA;AA8KT9B,+BAASP,MAAMQ,QAAN,EAAT;AACA;AACA;AACA;AACA;AACA;AACA;AACAN,kCAAYJ,QAAQQ,OAApB,EAA6BN,KAA7B;AACA;AACA;AACA;AACA;AAzLS;AAAA,2BA0LF;AA1LE;;AAAA;AAAA;AAAA,2BA6LF;AA7LE;;AAAA;AAAA;AAAA,2BAgMF;AAhME;;AAAA;AAmMTO,+BAASP,MAAMQ,QAAN,EAAT;AACAV,8BAAQwC,QAAR,CAAiBxB,GAAjB,CACE,UAACT,SAAD,EAAe;AACbD,0CAAkBC,SAAlB,EAA6BP,QAAQQ,OAArC,EAA8CN,KAA9C;AACD,uBAHH;AApMS;AAAA,2BAyMF;AAzME;;AAAA;AA4MTO,+BAASP,MAAMQ,QAAN,EAAT;AACAV,8BAAQwC,QAAR,CAAiBxB,GAAjB,CACE,UAACT,SAAD,EAAe;AACbF,+CAAuBE,SAAvB,EAAkCL,KAAlC;AACD,uBAHH;AA7MS;AAAA,2BAkNF;AAlNE;;AAAA;AAqNTO,+BAASP,MAAMQ,QAAN,EAAT;AACA,0BAAID,OAAOE,QAAP,CAAgBX,QAAQO,SAAxB,CAAJ,EAAwC;AACtCF,+CAAuBL,QAAQO,SAA/B,EAA0CL,KAA1C;AACD;AAxNQ;AAAA,2BAyNF;AAzNE;;AAAA;AA4NTO,+BAASP,MAAMQ,QAAN,EAAT;;AAEA;AACA,6BAAOV,QAAQyC,cAAR,IAA0BhC,OAAOK,MAAP,CAAcyB,IAAd,CAAmBG,MAApD,EAA4D;AAC1D,4BAAI1C,QAAQyC,cAAR,GAAyBhC,OAAOK,MAAP,CAAcyB,IAAd,CAAmBG,MAAhD,EAAwD;AACtD;AACAxC,gCAAMW,QAAN,CAAgB,wBAAU;AACxBL,qCAASR,QAAQoC,IAAR,IAAgBC,KAAKC,GAAL,EADD;AAExB;AACAL,kCAAMjC,QAAQiC,IAAR,IAAgBxB,OAAOK,MAAP,CAAcyB,IAAd,CAAmBG,MAAnB,GAA4B,CAH1B;AAIxBH,kCAAMvC,QAAQuC,IAAR,IAAgB;AAJE,2BAAV,CAAhB;AAMD,yBARD,MAQO;AACL;AACAnC,sCAAYK,OAAOK,MAAP,CAAcyB,IAAd,CAAmB9B,OAAOK,MAAP,CAAcyB,IAAd,CAAmBG,MAAnB,GAA4B,CAA/C,CAAZ,EAA+DxC,KAA/D;AACD;AACF;;AAED;;AACSyC,gCA/OA,GA+OT,SAASA,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,4BAAIC,QAAQC,KAAKC,KAAL,CAAWH,IAAED,CAAb,CAAZ;AACA,4BAAIK,2BAA2B,EAA/B;;AAEA,6BAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIN,CAApB,EAAuBM,GAAvB,EAA4B;AAC1BD,mDAAyBE,IAAzB,CAA8BL,KAA9B;AACD;;AAED,6BAAK,IAAII,KAAI,CAAb,EAAgBA,KAAIL,IAAED,CAAtB,EAAyBM,IAAzB,EAA8B;AAC5BD,mDAAyBC,EAAzB,KAA+B,CAA/B;AACD;;AAED,+BAAOD,wBAAP;AACD,uBA5PQ;;AA+PHA,8CA/PG,GA+PwBN,WAAW3C,QAAQyC,cAAnB,EAAmChC,OAAOE,QAAP,CAAgB4B,IAAhB,CAAqBG,MAAxD,CA/PxB;AAgQHnC,+BAhQG,WAgQQK,KAhQR,WAgQeJ,OAhQf;AAiQP;;AACI4C,4BAlQG,GAkQM,IAlQN;;AAoQP;;AACA,2BAASF,CAAT,GAAa,CAAb,EAAgBA,IAAIlD,QAAQyC,cAA5B,EAA4CS,GAA5C,EAAiD;AAC/CtC,gCAAQH,OAAOK,MAAP,CAAeL,OAAOK,MAAP,CAAcyB,IAAd,CAAmBW,CAAnB,CAAf,CAAR;AACA,+BAAOtC,MAAMG,WAAN,CAAkB2B,MAAlB,GAA2BO,yBAAyBC,CAAzB,CAAlC,EAA+D;AAC7D7C;AACE;AACAO,gCAAMG,WAAN,CAAmBH,MAAMG,WAAN,CAAkB2B,MAAlB,GAA2B,CAA9C,CAFF,EAGExC,KAHF;AAKD;AACF;AACD;AACSgD,yBAhRF,GAgRM,CAhRN;;AAAA;AAAA,4BAgRSA,MAAIlD,QAAQyC,cAhRrB;AAAA;AAAA;AAAA;;AAiRLjC,gCAAUC,OAAOK,MAAP,CAAcyB,IAAd,CAAmBW,GAAnB,CAAV;AACAtC,8BAAQH,OAAOK,MAAP,CAAeN,OAAf,CAAR;;AAlRK;AAAA,4BAmREI,MAAMG,WAAN,CAAkB2B,MAAlB,GAA2BO,yBAAyBC,GAAzB,CAnR7B;AAAA;AAAA;AAAA;;AAAA,4BAqRCE,UAAU,IArRX;AAAA;AAAA;AAAA;;AAsRD;AACA7C,kCAAY,EAAZ;AAvRC;AAAA;AAAA;AAAA;AAwRD,kEAAgBE,OAAOE,QAAP,CAAgB4B,IAAhC,qGAAsC;AAA7Bc,2BAA6B;;AACpC,4BAAI5C,OAAOE,QAAP,CAAgB0C,GAAhB,EAAqBzC,KAArB,IAA8B,YAAlC,EAAgD;AAC9CL,oCAAU4C,IAAV,CAAgBE,GAAhB;AACD;AACF;;AA5RA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AA8RD/C,wCACEC,UAAWwC,KAAKC,KAAL,CAAYD,KAAKK,MAAL,KAAgB7C,UAAUmC,MAAtC,CAAX,CADF,EAEElC,OAFF,EAGEN,KAHF;AA9RC;AAAA;;AAAA;AAoSD;AApSC;AAAA;AAAA;AAAA;AAAA,8DAqSeO,OAAOE,QAAP,CAAgB4B,IArS/B;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAqSQc,0BArSR;;AAAA,4BAsSK5C,OAAOE,QAAP,CAAgB0C,IAAhB,EAAqBzC,KAArB,IAA8B,YAtSnC;AAAA;AAAA;AAAA;;AAuSGL,kCAAY8C,IAAZ;AAvSH;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AA4SD/C,wCACEC,SADF,EAEEC,OAFF,EAGEN,KAHF;;AA5SC;AAAA;AAAA;;AAAA;AAgRqCgD,2BAhRrC;AAAA;AAAA;;AAAA;AAAA;AAAA,2BAsTF;AAtTE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAeI,M;;;;SAAAA,M;;;AAnB9B;;;AA5BA","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n} from './server-actions'\n\n// Redux server actions\nimport {\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // Go to WaitSync to start session\n    ws.send(\n      wsGotoPage({ url: '/survey/waitSync', options: {} })\n    )\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n      if ('message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if ('message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n  }\n}\n"],"sourceRoot":"/source/"}