{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["clientsSocket","action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","nextStep","accountId","tempWs","index","clients","findIndex","wsElement","accountCode","console","log","result","getState","account","accounts","accountSessionPointer","surveyPointer","dispatch","send","url","session","surveyPath","type","options","groupId","group","groups","accountList","map","tempAccount","undefined","email","payloadResponse","firstName","surename","password","reEnterPassword","error","message","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","constructor","forEach","surveyId","creator","groupType","mutate"],"mappings":"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","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n\n  TASK_IDEA_ADD,\n\n} from './server-actions'\n\n// Redux server actions\nimport {\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  SURVEY_STEP_ALL,\n  SUBMIT_SURVEY_INFO,\n\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n\n  storeSurveInfo,\n  taskIdeaAdd,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// Get an url from an survey-type\nimport { resolveSurveyURL } from '../components/survey/survey-types'\n\nimport WebSocketSimple from './websocket-simple'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }, clientsSocket) {\n  let payloadResponse,\n      result,\n      account\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // // Go to WaitSync to start session\n    // ws.send(\n    //   wsGotoPage({ url: '/survey/waitSync', options: {} })\n    // )\n\n    nextStep(account.email)\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  function nextStep(accountId) {\n    let tempWs = ''\n    let index = clientsSocket.clients.findIndex( wsElement => wsElement.accountCode == accountId )\n    if (index >= 0) {\n      // debugger\n\n      tempWs = new WebSocketSimple( clientsSocket.clients[ index ] )\n    } else {\n      console.log('accountId not found. It looks like not connected > ' + accountId)\n      // console.error(Object.keys(mainSockets))\n      // throw Error('accountId not found')\n      return false\n    }\n    // Get the session survey\n    let result = store.getState()\n    let account = result.accounts[accountId]\n    let accountSessionPointer = 'surveyPointer' in account? account.surveyPointer + 1:  0\n    store.dispatch( accountsUpdate({ ...account, surveyPointer: accountSessionPointer }) )\n    // Go to WaitSync to start session\n    tempWs.send(\n      wsGotoPage({ url: resolveSurveyURL( result.session.surveyPath[ accountSessionPointer ].type ), options: {} })\n    )\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n    case SURVEY_STEP_ALL:\n      if (typeof payload == 'object' && payload.constructor.name == 'Array') {\n        payload.forEach( accountId => nextStep( accountId ) )\n      }\n      return true\n\n    case SUBMIT_SURVEY_INFO:\n      // Check payload && payload accountId\n      if (typeof payload != 'object' || !payload.accountId || payload.accountId == 'unassigned') {\n        console.log('SUBMIT_SURVEY_INFO: No valid accountId')\n        return false\n      }\n\n      result = store.getState()\n\n      // Add survey info to the redux store and to the database.\n      store.dispatch(\n        storeSurveInfo({\n          surveyId: result.accounts[payload.accountId].surveyPointer,\n          ...payload\n        })\n      )\n\n      // After that move to the next survey step.\n      nextStep( payload.accountId )\n\n      return true\n\n    case TASK_IDEA_ADD:\n      result = store.getState()\n\n      store.dispatch(\n        taskIdeaAdd({\n          group: result.accounts[payload.creator].group,\n          groupType: result.groups[\n            result.accounts[payload.creator].group\n          ].type,\n          ...payload,\n        })\n      )\n\n      return true\n\n\n  }\n}\n"],"sourceRoot":"/source/"}