{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","accountId","groupId","result","getState","accounts","group","dispatch","groups","map","account","tempAccount","console","log","undefined","send","url","options","payloadResponse","firstName","surename","email","password","reEnterPassword","error","message","type","accountCode","token","name","Date","now","selected","numberOfGroups","list","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","acc","mutate"],"mappings":"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","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n} from './server-actions'\n\n// Redux server actions\nimport {\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // Go to WaitSync to start session\n    ws.send(\n      wsGotoPage({ url: '/survey/waitSync', options: {} })\n    )\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n      if ('message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if ('message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd( payload.name || Date.now() ) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd( Date.now() ) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          if (group.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group[ group.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.length < orderedGroupsAndAccounts[i]) {\n            // Find a free accountId\n            for (let acc of result.accounts.list) {\n              if (result.accounts[acc].group == 'unassigned') {\n                accountId = acc\n                break;\n              }\n            }\n\n            addAccountToGroup(\n              accountId,\n              groupId,\n              store\n            )\n          }\n        }\n      }\n      return true\n\n  }\n}\n"],"sourceRoot":"/source/"}