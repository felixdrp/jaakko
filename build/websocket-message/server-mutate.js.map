{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["clientsSocket","action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","nextStep","accountId","tempWs","index","clients","findIndex","wsElement","accountCode","console","log","result","getState","account","accounts","accountSessionPointer","surveyPointer","dispatch","send","url","session","surveyPath","type","options","groupId","group","groups","accountList","map","tempAccount","undefined","email","payloadResponse","temp","firstName","surname","password","reEnterPassword","error","message","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","constructor","forEach","accountSurveyPointer","surveyId","numActiveAccounts","reduce","prev","groupID","numActualSurveysRecived","results","surveyInfo","survey","dataSimilarities","filter","element","surveyData","dataFavourites","data","aggregated","f","found","e","id","rating","entry","Array","creator","groupType","mutate"],"mappings":"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","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n\n  TASK_IDEA_ADD,\n\n} from './server-actions'\n\n// Redux server actions\nimport {\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  SURVEY_STEP_ALL,\n  SUBMIT_SURVEY_INFO,\n\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n\n  storeSurveInfo,\n  taskIdeaAdd,\n  taskAddAllSimilarities,\n  taskAddAllFavourites,\n  taskIncreasePointer,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// Get an url from an survey-type\nimport {\n  resolveSurveyURL,\n\n  SIMILARITIES,\n  FAVOURITES,\n  RESULTS,\n} from '../components/survey/survey-types'\n\nimport WebSocketSimple from './websocket-simple'\n\nimport processSimilarities from '../modules/similarity'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }, clientsSocket) {\n  let payloadResponse,\n      result,\n      account,\n      temp = {}\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // // Go to WaitSync to start session\n    // ws.send(\n    //   wsGotoPage({ url: '/survey/waitSync', options: {} })\n    // )\n\n    nextStep(account.email)\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  function nextStep(accountId) {\n    let tempWs = ''\n    let index = clientsSocket.clients.findIndex( wsElement => wsElement.accountCode == accountId )\n    if (index >= 0) {\n      // debugger\n\n      tempWs = new WebSocketSimple( clientsSocket.clients[ index ] )\n    } else {\n      console.log('accountId not found. It looks like not connected > ' + accountId)\n      // console.error(Object.keys(mainSockets))\n      // throw Error('accountId not found')\n      return false\n    }\n    // Get the session survey\n    let result = store.getState()\n    let account = result.accounts[accountId]\n    let accountSessionPointer = 'surveyPointer' in account? account.surveyPointer + 1:  0\n    store.dispatch( accountsUpdate({ ...account, surveyPointer: accountSessionPointer }) )\n    // Go to WaitSync to start session\n    tempWs.send(\n      wsGotoPage({ url: resolveSurveyURL( result.session.surveyPath[ accountSessionPointer ].type ), options: {} })\n    )\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surname: payload.surname,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surname: payload.surname,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surname: result.surname,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n    case SURVEY_STEP_ALL:\n      if (typeof payload == 'object' && payload.constructor.name == 'Array') {\n        payload.forEach( accountId => nextStep( accountId ) )\n      }\n      return true\n\n    case SUBMIT_SURVEY_INFO:\n      // Check payload && payload accountId\n      if (typeof payload != 'object' || !payload.accountId || payload.accountId == 'unassigned') {\n        console.log('SUBMIT_SURVEY_INFO: No valid accountId')\n        return false\n      }\n      temp = {}\n      result = store.getState()\n      temp.accountSurveyPointer = result.accounts[ payload.accountId ].surveyPointer\n      // Add survey info to the redux store and to the database.\n      store.dispatch(\n        storeSurveInfo({\n          ...payload,\n          surveyId: temp.accountSurveyPointer,\n        })\n      )\n\n      // After that move to the next survey step.\n      nextStep( payload.accountId )\n\n      result = store.getState()\n\n      temp.numActiveAccounts = result.groups.list.reduce(\n        (prev, groupID) => {\n          return prev + result.groups[groupID].accountList.length\n        },\n        0\n      )\n\n      temp.numActualSurveysRecived = result.results.surveyInfo.reduce(\n        (prev, survey) => {\n          if (survey.surveyId == temp.accountSurveyPointer) {\n            return prev + 1\n          }\n          return prev\n        },\n        0\n      )\n\n      // If information need processing after the last account have being submited:\n      // EX: SIMILARITIES, FAVOURITES & RESULTS\n      if ( temp.numActiveAccounts > 0 && temp.numActiveAccounts == temp.numActualSurveysRecived ) {\n        switch (result.session.surveyPath[temp.accountSurveyPointer].type) {\n          case SIMILARITIES:\n            // Get the all SIMILARITIES survey results.\n            temp.dataSimilarities = result.results.surveyInfo.filter(\n              element => element.surveyId == temp.accountSurveyPointer\n            )\n            temp.dataSimilarities = temp.dataSimilarities.reduce(\n              (prev, survey) => {\n                return prev = [ ...prev, ...survey.surveyData ]\n              },\n              []\n            )\n            // Process SIMILARITIES and store in task.similarList\n            store.dispatch(\n              taskAddAllSimilarities(\n                processSimilarities( temp.dataSimilarities )\n              )\n            )\n            break;\n\n          case FAVOURITES:\n            // Process the FAVOURITES\n            console.log('FAVOURITES PRIMEro ANTES>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            try{\n              temp.dataFavourites = result.results.surveyInfo.filter(\n                element => element.surveyId == temp.accountSurveyPointer\n              )\n\n              temp.dataFavourites = temp.dataFavourites.reduce(\n                (prev, survey) => {\n                  return prev = [ ...prev, ...survey.surveyData.data ]\n                },\n                []\n              )\n\n              console.log(\"ESTODEAKI: \"+ JSON.stringify(temp.dataFavourites))\n              var aggregated = []\n              var found;\n              var entry;\n\n                for ( var f in temp.dataFavourites){\n                found = false;\n\n                  for ( var e in aggregated){\n                    if (temp.dataFavourites[f].id == aggregated[e].id){\n                      aggregated[e].rating.push(temp.dataFavourites[f].rating)\n                      found = true;\n                      break;\n                    }\n                  }\n\n                  if ( !found ) {\n                    entry = temp.dataFavourites[f]\n                    if ( entry.rating ){\n                      if (! (entry.rating instanceof Array) ){\n                        entry.rating = [entry.rating]\n                      }\n                    } else {\n                      entry.rating = []\n                    }\n                    aggregated.push(entry)\n                  }\n\n                }\n              } catch (e){\n                console.log(e)\n\n\n              }\n            console.log('FAVOURITES PRIMEro>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            console.log(\"DATOS::::::> \"+JSON.stringify(aggregated))\n            //console.log( processSimilarities( temp.dataSimilarities ) )\n            console.log('FAVOURITES SEGUNDO>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            store.dispatch(\n              taskAddAllFavourites( aggregated )\n            )\n            break;\n\n          case RESULTS:\n\n            store.dispatch( taskIncreasePointer() )\n            break;\n\n          default:\n\n        }\n      }\n\n      return true\n\n    case TASK_IDEA_ADD:\n      result = store.getState()\n\n      store.dispatch(\n        taskIdeaAdd({\n          group: result.accounts[payload.creator].group,\n          groupType: result.groups[\n            result.accounts[payload.creator].group\n          ].type,\n          ...payload,\n        })\n      )\n\n      return true\n\n\n  }\n}\n"],"sourceRoot":"/source/"}