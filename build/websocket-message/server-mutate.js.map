{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["clientsSocket","action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","removeGroup","removeAccountFromGroup","addAccountToGroup","nextStep","accountId","tempWs","index","clients","findIndex","wsElement","accountCode","console","log","result","getState","account","accounts","accountSessionPointer","surveyPointer","dispatch","send","url","session","surveyPath","type","options","groupId","group","groups","accountList","map","tempAccount","fromJS","delete","toJS","email","payloadResponse","temp","firstName","surname","password","reEnterPassword","error","message","token","name","Date","now","list","selected","numberOfGroups","length","drawGroups","g","a","baseA","Math","floor","orderedGroupsAndAccounts","i","push","random","acc","constructor","forEach","accountSurveyPointer","surveyId","surveyType","numActiveAccounts","reduce","prev","groupID","numActualSurveysRecived","results","surveyInfo","survey","dataSimilarities","filter","element","surveyData","dataFavourites","data","aggregated","f","found","e","id","rating","entry","Array","creator","groupType","mutate"],"mappings":"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","file":"server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport Immutable from 'immutable'\n\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n\n  TASK_IDEA_ADD,\n\n} from './server-actions'\n\n// Redux server actions\nimport {\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  SURVEY_STEP_ALL,\n  SUBMIT_SURVEY_INFO,\n\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n\n  storeSurveInfo,\n  taskIdeaAdd,\n  taskAddAllSimilarities,\n  taskAddAllFavourites,\n  taskIncreasePointer,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n// Get an url from an survey-type\nimport {\n  resolveSurveyURL,\n\n  SIMILARITIES,\n  FAVOURITES,\n  RESULTS,\n} from '../components/survey/survey-types'\n\nimport WebSocketSimple from './websocket-simple'\n\nimport processSimilarities from '../modules/similarity'\n\n// import filterAccountsByGroup from '../modules/filter-accounts-by-group'\n\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }, clientsSocket) {\n  let payloadResponse,\n      result,\n      account,\n      temp = {}\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = Immutable.fromJS( account )\n    // Remove the websocket from the object\n    tempAccount = tempAccount.delete('ws')\n    tempAccount = tempAccount.toJS()\n\n    ws.send(  wsLogAccount( tempAccount ) )\n    console.log('>>>>>state')\n\n    // // Go to WaitSync to start session\n    // ws.send(\n    //   wsGotoPage({ url: '/survey/waitSync', options: {} })\n    // )\n\n    nextStep(account.email)\n    console.log('>>>>>state')\n  }\n\n  function removeGroup(groupId, store) {\n    let result = store.getState()\n    result.groups[groupId].accountList.map(\n      (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n    )\n    store.dispatch( groupsRemove( groupId ) )\n  }\n\n  function removeAccountFromGroup(accountId, store) {\n    let result = store.getState()\n    // remove account from group\n    store.dispatch( groupsRemoveAccount(result.accounts[accountId].group, accountId) )\n    // account to 'unassigned'\n    store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n  }\n\n  function addAccountToGroup(accountId, groupId, store) {\n    let result = store.getState()\n    if ( result.accounts[accountId].group == 'unassigned' ) {\n      store.dispatch( groupsAddAccount( groupId, accountId ) )\n      store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: groupId }) )\n    } else {\n      store.dispatch( moveAccounFromGroup( accountId, groupId ) )\n    }\n  }\n\n  /*\n  * Function that moves the account to the next survey.\n  * It increases the account survey pointer and move this survey pointer number.\n  */\n  function nextStep(accountId) {\n    let tempWs = ''\n    let index = clientsSocket.clients.findIndex( wsElement => wsElement.accountCode == accountId )\n    if (index >= 0) {\n      // debugger\n\n      tempWs = new WebSocketSimple( clientsSocket.clients[ index ] )\n    } else {\n      console.log('accountId not found. It looks like not connected > ' + accountId)\n      // console.error(Object.keys(mainSockets))\n      // throw Error('accountId not found')\n      return false\n    }\n    // Get the session survey\n    let result = store.getState()\n    let account = result.accounts[accountId]\n    let accountSessionPointer = 'surveyPointer' in account? account.surveyPointer + 1:  0\n    store.dispatch( accountsUpdate({ ...account, surveyPointer: accountSessionPointer }) )\n    // Go to WaitSync to start session\n    tempWs.send(\n      wsGotoPage({ url: resolveSurveyURL( result.session.surveyPath[ accountSessionPointer ].type ), options: {} })\n    )\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surname: payload.surname,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surname: payload.surname,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if (typeof result == 'object' && 'message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surname: result.surname,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd({\n         groupId: payload.name || Date.now(),\n         type: payload.type || 0,\n         list: payload.list || [],\n      }) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      // console.log('>>>>> ' + GROUPS_REMOVE)\n      // console.log(payload)\n      // console.log(store.getState())\n      // console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      removeGroup(payload.groupId, store)\n      // result.groups[payload.groupId].map(\n      //   (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      // )\n      // store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          addAccountToGroup(accountId, payload.groupId, store)\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          removeAccountFromGroup(accountId, store)\n        }\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        removeAccountFromGroup(payload.accountId, store)\n      }\n      return true\n\n    case GROUPS_AUTOMATE_CREATION:\n      result = store.getState()\n\n      // Correct the number of groups\n      while (payload.numberOfGroups != result.groups.list.length) {\n        if (payload.numberOfGroups > result.groups.list.length) {\n          // Add group\n          store.dispatch( groupsAdd({\n            groupId: payload.name || Date.now(),\n            // Assign a type from 0 - 3\n            type: payload.type || result.groups.list.length % 4,\n            list: payload.list || [],\n          }) )\n        } else {\n          // Remove group\n          removeGroup(result.groups.list[result.groups.list.length - 1], store)\n        }\n      }\n\n      // reapeted from class GroupAutomatic\n      function drawGroups(g, a) {\n        let baseA = Math.floor(a/g)\n        let orderedGroupsAndAccounts = []\n\n        for (let i = 0; i < g; i++) {\n          orderedGroupsAndAccounts.push(baseA)\n        }\n\n        for (let i = 0; i < a%g; i++) {\n          orderedGroupsAndAccounts[i] += 1\n        }\n\n        return orderedGroupsAndAccounts\n      }\n\n      {\n        let orderedGroupsAndAccounts = drawGroups(payload.numberOfGroups, result.accounts.list.length)\n        let accountId, group, groupId\n        // Make the gropus random\n        let random = true\n\n        // remove accounts to excess groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          group = result.groups[ result.groups.list[i] ]\n          while (group.accountList.length > orderedGroupsAndAccounts[i]) {\n            removeAccountFromGroup(\n              // last account of the group\n              group.accountList[ group.accountList.length - 1 ],\n              store\n            )\n          }\n        }\n        // Add accounts to deficit groups\n        for (let i = 0; i < payload.numberOfGroups; i++) {\n          groupId = result.groups.list[i]\n          group = result.groups[ groupId ]\n          while (group.accountList.length < orderedGroupsAndAccounts[i]) {\n            // Do it random?\n            if (random == true) {\n              // Find a free accountId\n              accountId = []\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId.push( acc )\n                }\n              }\n\n              addAccountToGroup(\n                accountId[ Math.floor( Math.random() * accountId.length ) ],\n                groupId,\n                store\n              )\n            } else {\n              // Find a free accountId\n              for (let acc of result.accounts.list) {\n                if (result.accounts[acc].group == 'unassigned') {\n                  accountId = acc\n                  break;\n                }\n              }\n\n              addAccountToGroup(\n                accountId,\n                groupId,\n                store\n              )\n            }\n\n          }\n        }\n      }\n      return true\n\n    case SURVEY_STEP_ALL:\n      if (typeof payload == 'object' && payload.constructor.name == 'Array') {\n        payload.forEach( accountId => nextStep( accountId ) )\n      }\n      return true\n\n    case SUBMIT_SURVEY_INFO:\n      // Check payload && payload accountId\n      if (typeof payload != 'object' || !payload.accountId || payload.accountId == 'unassigned') {\n        console.log('SUBMIT_SURVEY_INFO: No valid accountId')\n        return false\n      }\n      temp = {}\n      result = store.getState()\n      temp.accountSurveyPointer = result.accounts[ payload.accountId ].surveyPointer\n      // Add survey info to the redux store and to the database.\n      store.dispatch(\n        storeSurveInfo({\n          ...payload,\n          surveyId: temp.accountSurveyPointer,\n          surveyType: result.session.surveyPath[temp.accountSurveyPointer].type,\n          groupId: result.accounts[ payload.accountId ].group,\n        })\n      )\n\n      // After that move to the next survey step.\n      nextStep( payload.accountId )\n\n      result = store.getState()\n\n      temp.numActiveAccounts = result.groups.list.reduce(\n        (prev, groupID) => {\n          return prev + result.groups[groupID].accountList.length\n        },\n        0\n      )\n\n      temp.numActualSurveysRecived = result.results.surveyInfo.reduce(\n        (prev, survey) => {\n          if (survey.surveyId == temp.accountSurveyPointer) {\n            return prev + 1\n          }\n          return prev\n        },\n        0\n      )\n\n      // If information need processing after the last account have being submited:\n      // EX: SIMILARITIES, FAVOURITES & RESULTS\n      if ( temp.numActiveAccounts > 0 && temp.numActiveAccounts == temp.numActualSurveysRecived ) {\n        switch (result.session.surveyPath[temp.accountSurveyPointer].type) {\n          case SIMILARITIES:\n            // Get the all SIMILARITIES survey results.\n            temp.dataSimilarities = result.results.surveyInfo.filter(\n              element => element.surveyId == temp.accountSurveyPointer\n            )\n            temp.dataSimilarities = temp.dataSimilarities.reduce(\n              (prev, survey) => {\n                return prev = [ ...prev, ...survey.surveyData ]\n              },\n              []\n            )\n            // Process SIMILARITIES and store in task.similarList\n            store.dispatch(\n              taskAddAllSimilarities(\n                processSimilarities( temp.dataSimilarities )\n              )\n            )\n            break;\n\n          case FAVOURITES:\n            // Process the FAVOURITES\n            console.log('FAVOURITES PRIMEro ANTES>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            try{\n              temp.dataFavourites = result.results.surveyInfo.filter(\n                element => element.surveyId == temp.accountSurveyPointer\n              )\n\n              temp.dataFavourites = temp.dataFavourites.reduce(\n                (prev, survey) => {\n                  return prev = [ ...prev, ...survey.surveyData.data ]\n                },\n                []\n              )\n\n              console.log(\"ESTODEAKI: \"+ JSON.stringify(temp.dataFavourites))\n              var aggregated = []\n              var found;\n              var entry;\n\n                for ( var f in temp.dataFavourites){\n                found = false;\n\n                  for ( var e in aggregated){\n                    if (temp.dataFavourites[f].id == aggregated[e].id){\n                      aggregated[e].rating.push(temp.dataFavourites[f].rating)\n                      found = true;\n                      break;\n                    }\n                  }\n\n                  if ( !found ) {\n                    entry = temp.dataFavourites[f]\n                    if ( entry.rating ){\n                      if (! (entry.rating instanceof Array) ){\n                        entry.rating = [entry.rating]\n                      }\n                    } else {\n                      entry.rating = []\n                    }\n                    aggregated.push(entry)\n                  }\n\n                }\n              } catch (e){\n                console.log(e)\n\n\n              }\n            console.log('FAVOURITES PRIMEro>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            console.log(\"DATOS::::::> \"+JSON.stringify(aggregated))\n            //console.log( processSimilarities( temp.dataSimilarities ) )\n            console.log('FAVOURITES SEGUNDO>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> processSimilarities <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<')\n            store.dispatch(\n              taskAddAllFavourites( aggregated )\n            )\n            break;\n\n          case RESULTS:\n\n            store.dispatch( taskIncreasePointer() )\n            break;\n\n          default:\n\n        }\n      }\n\n      return true\n\n    case TASK_IDEA_ADD:\n      result = store.getState()\n      temp.creator = result.accounts[payload.creator]\n\n      store.dispatch(\n        taskIdeaAdd({\n          group: result.accounts[payload.creator].group,\n          groupType: result.groups[\n            result.accounts[payload.creator].group\n          ].type,\n          firstName: temp.creator.firstName,\n          surname: temp.creator.surname,\n          ...payload,\n        })\n      )\n\n      return true\n\n\n  }\n}\n"]}