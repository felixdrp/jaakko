{"version":3,"sources":["websocket-message/server-mutate.js"],"names":["action","payload","ws","store","reduxStoreServerAndClientRegisterAccountAndGoToWait","account","tempAccount","dispatch","group","console","log","undefined","send","url","options","payloadResponse","result","firstName","surename","email","password","reEnterPassword","error","message","type","accountCode","token","getState","name","Date","now","groups","groupId","map","accountId","accounts","selected","mutate"],"mappings":"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","file":"websocket-message/server-mutate.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n  wsLogAccount,\n  wsGotoPage,\n} from './server-actions'\n\n// Redux server actions\nimport {\n  accountsAdd,\n  accountsUpdate,\n  accountsRemove,\n\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  ACCOUNT_REGISTER_ERROR,\n  ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\nimport { createAccount } from '../modules/account/create-account'\nimport { loginAccount } from '../modules/account/login-account'\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  function reduxStoreServerAndClientRegisterAccountAndGoToWait(account) {\n    let tempAccount\n    // Register the user in the server store.\n    store.dispatch( accountsAdd({...account, group: 'unassigned'}) )\n    console.log('>>>>>state')\n\n    // Log the account in the Client\n    tempAccount = {...account, ws: undefined}\n    delete tempAccount.ws\n    ws.send(  wsLogAccount(account) )\n    console.log('>>>>>state')\n\n    // Go to WaitSync to start session\n    ws.send(\n      wsGotoPage({ url: '/survey/waitSync', options: {} })\n    )\n    console.log('>>>>>state')\n\n  }\n\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n      if ('message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'The input field password not valid'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Email already used.'\n        ) {\n          payloadResponse = { email: 'Please, choose another email.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_REGISTER_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // User registered!!\n      //\n      // To give websocket.accountCode the account email\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: payload.firstName,\n        surename: payload.surename,\n        token: result,\n        ws,\n      }\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      // Ready to asign to a group\n      return true\n\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if ('message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n\n    case GROUPS_ADD:\n      store.dispatch( groupsAdd( payload.name || Date.now() ) )\n      return true\n\n    case GROUPS_REMOVE:\n      result = store.getState()\n      console.log('>>>>> ' + GROUPS_REMOVE)\n      console.log(payload)\n      console.log(store.getState())\n      console.log('result.accounts[accountId]> ')\n      // console.log(result.accounts[accountId])\n      // Free all the accounts from group\n      result.groups[payload.groupId].map(\n        (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      )\n      store.dispatch( groupsRemove( payload.groupId ) )\n      return true\n\n    case GROUPS_ADD_ACCOUNT:\n      return true\n\n    case GROUPS_REMOVE_ACCOUNT:\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_TO_GROUP:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => {\n          if ( result.accounts[accountId].group == 'unassigned' ) {\n            store.dispatch( groupsAddAccount( payload.groupId, accountId ) )\n            store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: payload.groupId }) )\n          } else {\n            store.dispatch( moveAccounFromGroup( accountId, payload.groupId ) )\n          }\n        }\n      )\n      return true\n\n    case GROUPS_SELECTED_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      payload.selected.map(\n        (accountId) => store.dispatch( accountsUpdate({ ...result.accounts[accountId], group: 'unassigned' }) )\n      )\n      return true\n\n    case GROUPS_ACCOUNTS_UNASSIGN:\n      result = store.getState()\n      if (result.accounts[payload.accountId]) {\n        store.dispatch( accountsUpdate({ ...result.accounts[payload.accountId], group: 'unassigned' }) )\n      }\n      return true\n\n  }\n}\n"],"sourceRoot":"/source/"}