{"version":3,"sources":["websocket-message/server-query.js"],"names":["action","payload","ws","store","payloadResponse","result","account","LOGIN_ACCOUNT","getState","send","loginAccount","email","password","console","log","error","message","type","ACCOUNT_LOGIN_ERROR","accountCode","firstName","surename","token","reduxStoreServerAndClientRegisterAccountAndGoToWait","query"],"mappings":";;;;;;;;;;;;;;AAEA;;;;AAEA;;AASA;;AAMA;;AAWA;;;;AAKA;;;;;;;;;;AAjBA;;wEA2Be;AAAA,QAAuBA,MAAvB,SAAuBA,MAAvB;AAAA,QAA+BC,OAA/B,SAA+BA,OAA/B;AAAA,QAAwCC,EAAxC,SAAwCA,EAAxC;AAAA,QAA4CC,KAA5C,SAA4CA,KAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AACTC,2BADS,WAETC,MAFS,WAGTC,OAHS;AAAA,0BAKLN,MALK;AAAA,kGAcNO,aAdM;AAAA;;AAAA;AAOT;AACAH,8BAAkB,yCAA4BD,MAAMK,QAAN,EAA5B,CAAlB;;AAEAN,eAAGO,IAAH,CACE,wCAAoBL,eAApB,CADF;AAVS,6CAaF,IAbE;;AAAA;AAAA;AAAA,mBAgBMM,aAAa;AAC1BC,qBAAOV,QAAQU,KADW;AAE1BC,wBAAUX,QAAQW;AAFQ,aAAb,CAhBN;;AAAA;AAgBTP,kBAhBS;;AAoBTQ,oBAAQC,GAAR,CAAYT,MAAZ;;AApBS,kBAsBL,aAAaA,MAtBR;AAAA;AAAA;AAAA;;AAuBP;AACA;AACAQ,oBAAQE,KAAR,CAAcV,OAAOW,OAArB;AACA,gBACEX,OAAOW,OAAP,KAAmB,iCAAnB,IACAX,OAAOW,OAAP,KAAmB,4CAFrB,EAGE;AACAZ,gCAAkB,EAAEO,OAAO,wBAAT,EAAlB;AACD,aALD,MAKO,IACLN,OAAOW,OAAP,KAAmB,qBADd,EAEL;AACAZ,gCAAkB,EAAEQ,UAAU,2BAAZ,EAAlB;AACD,aAJM,MAIA,IACLP,OAAOW,OAAP,KAAmB,0BADd,EAEL;AACAZ,gCAAkB,EAAEO,OAAO,mCAAT,EAAlB;AACD;AACD;AACAT,eAAGO,IAAH,CACE;AACEQ,yCADF;AAEEjB,sBAAQkB,mBAFV;AAGEjB,uBAASG;AAHX,aADF;AAzCO;;AAAA;AAkDT;AACA;AACAF,eAAGiB,WAAH,GAAiBlB,QAAQU,KAAzB;;AAEAL,sBAAU;AACRK,qBAAOV,QAAQU,KADP;AAERS,yBAAWf,OAAOe,SAFV;AAGRC,wBAAUhB,OAAOgB,QAHT;AAIRC,qBAAOjB,OAAOiB,KAJN;AAKRpB,kBAAIA;AALI,aAAV;;AAQAW,oBAAQC,GAAR,CAAY,YAAZ;AACAS,gEAAoDjB,OAApD;AACAO,oBAAQC,GAAR,CAAY,YAAZ;AACAD,oBAAQC,GAAR,CAAYX,MAAMK,QAAN,EAAZ;AACA;AACA;AAnES,6CAoEF,IApEE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAegB,K;;;;SAAAA,K;;;AAhB9B;AA7BA;AACA","file":"websocket-message/server-query.js","sourcesContent":["// WebSocket communications types\n// look doc/server-websocket-message-system.md\nimport Immutable from 'immutable'\n\nimport {\n  MUTATE,\n  QUERY,\n  ACTION,\n\n  wsGotoPage,\n  swUpdateControlRoom,\n} from './server-actions'\n\nimport {\n  SESSION_STATE_GET,\n} from './query-actions'\n\n\n// Redux server actions\nimport {\n  // Remove the WS from a store state\n  storeStateWithoutWebSocket,\n  groupsAdd,\n  groupsRemove,\n  groupsAddAccount,\n  groupsRemoveAccount,\n  moveAccounFromGroup,\n} from '../actions/actions'\n\n// Redux client actions\nimport {\n  // ACCOUNT_REGISTER_ERROR,\n  // ACCOUNT_LOGIN_ERROR,\n} from '../actions/client-actions'\n\n/**\n * Query will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function query({ action, payload, ws, store }) {\n  let payloadResponse,\n      result,\n      account\n\n  switch (action) {\n    case SESSION_STATE_GET:\n      // update state in components ControlRoom socket action creator\n      payloadResponse = storeStateWithoutWebSocket( store.getState() )\n\n      ws.send(\n        swUpdateControlRoom(payloadResponse)\n      )\n      return true\n    case LOGIN_ACCOUNT:\n      // Login an Account\n      result = await loginAccount({\n        email: payload.email,\n        password: payload.password,\n      })\n      console.log(result)\n\n      if ('message' in result) {\n        // Error try login.\n        // Send message of error to the client.\n        console.error(result.message)\n        if (\n          result.message === 'The input field email not valid' ||\n          result.message === 'The input field email is not a valid email'\n        ) {\n          payloadResponse = { email: 'The email is not valid' }\n        } else if (\n          result.message === 'Password not valid.'\n        ) {\n          payloadResponse = { password: 'The password is not valid' }\n        } else if (\n          result.message === 'Account Email not found.'\n        ) {\n          payloadResponse = { email: 'Please, check email and password.' }\n        }\n        // Send email error\n        ws.send(\n          {\n            type: ACTION,\n            action: ACCOUNT_LOGIN_ERROR,\n            payload: payloadResponse,\n          }\n        )\n        return\n      }\n      // Register the websocket 'ws.accountCode' with the email.\n      // So we can identify the ws with the account email.\n      ws.accountCode = payload.email\n\n      account = {\n        email: payload.email,\n        firstName: result.firstName,\n        surename: result.surename,\n        token: result.token,\n        ws: ws,\n      }\n\n      console.log('>>>>>state')\n      reduxStoreServerAndClientRegisterAccountAndGoToWait(account)\n      console.log('>>>>>state')\n      console.log(store.getState())\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n      break;\n  }\n}\n"],"sourceRoot":"/source/"}