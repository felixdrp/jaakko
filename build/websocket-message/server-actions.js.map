{"version":3,"sources":["websocket-message/server-actions.js"],"names":["registerAccount","loginAccount","wsLogAccount","wsGotoPage","wsGroupAdd","wsGroupRemove","wsAssignSelectedAccountsToGroup","wsUnassignSelectedAccounts","wsUnassignAccount","wsAutomateGroupsCreation","swUpdateControlRoom","wsSurveyStepAll","wsSubmitSurveyInfo","MUTATE","QUERY","ACTION","REGISTER_ACCOUNT","firstName","surename","email","password","reEnterPassword","type","action","payload","LOGIN_ACCOUNT","token","url","options","routerAction","obj","name","groupId","selected","accountId","numberOfGroups","state","accountList","info"],"mappings":"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","file":"websocket-message/server-actions.js","sourcesContent":["// Send the user to a new page\nimport { push  } from 'react-router-redux'\n\n// Redux client actions\nimport {\n  // ACCOUNT_REGISTER_ERROR,\n  // ACCOUNT_LOGIN_ERROR,\n  ACCOUNT_LOG_USER\n} from '../actions/client-actions'\n\nimport {\n  GROUPS_ADD,\n  GROUPS_REMOVE,\n  GROUPS_ADD_ACCOUNT,\n  GROUPS_REMOVE_ACCOUNT,\n  GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n  GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n  GROUPS_ACCOUNTS_UNASSIGN,\n  GROUPS_AUTOMATE_CREATION,\n\n  SURVEY_STEP_ALL,\n  SUBMIT_SURVEY_INFO,\n} from '../actions/actions'\n\nimport {\n  SESSION_STATE_GET\n} from './query-actions'\n\n// Server socket actions\n// Socket action types:\n\nexport const MUTATE = 'MUTATE'\nexport const QUERY = 'QUERY'\nexport const ACTION = 'ACTION'\n\n\n\n// Register a new account in the db and add to the account list\nexport const REGISTER_ACCOUNT = 'REGISTER_ACCOUNT'\n// Register using socket action creator\nexport function registerAccount({\n  firstName,\n  surename,\n  email,\n  password,\n  reEnterPassword\n}) {\n  return {\n    type: MUTATE,\n    action: REGISTER_ACCOUNT,\n    payload: {\n      firstName,\n      surename,\n      email,\n      password,\n      reEnterPassword,\n    }\n  }\n}\n\n// Check the account and add to the account list\nexport const LOGIN_ACCOUNT = 'LOGIN_ACCOUNT'\n// Register using socket action creator\nexport function loginAccount({email, password}) {\n  return {\n    type: MUTATE,\n    action: LOGIN_ACCOUNT,\n    payload: {\n      email,\n      password\n    }\n  }\n}\n\n// Log the account in the client redux store\nexport function wsLogAccount({email, firstName, surename, token}) {\n  return {\n    type: ACTION,\n    action: ACCOUNT_LOG_USER,\n    payload: {\n      email,\n      firstName,\n      surename,\n      token,\n    }\n  }\n}\n\n// Goto page\nexport function wsGotoPage({ url, options = {} }) {\n  let routerAction = push(url)\n  return {\n    type: ACTION,\n    action: routerAction.type,\n    payload: routerAction.payload\n  }\n}\n\n\n// Register a group socket action creator\nexport function wsGroupAdd(obj) {\n  let name = (obj && 'name' in obj)? obj.name : '';\n  return {\n    type: MUTATE,\n    action: GROUPS_ADD,\n    payload: {\n      name,\n    }\n  }\n}\n\n// Remove a group socket action creator\nexport function wsGroupRemove(groupId) {\n  return {\n    type: MUTATE,\n    action: GROUPS_REMOVE,\n    payload: {\n      groupId,\n    }\n  }\n}\n\n// Register selected accounts to a group socket action creator\nexport function wsAssignSelectedAccountsToGroup( groupId, selected = [] ) {\n  return {\n    type: MUTATE,\n    action: GROUPS_SELECTED_ACCOUNTS_TO_GROUP,\n    payload: {\n      groupId,\n      selected,\n    }\n  }\n}\n\nexport function wsUnassignSelectedAccounts(selected = [] ) {\n  return {\n    type: MUTATE,\n    action: GROUPS_SELECTED_ACCOUNTS_UNASSIGN,\n    payload: {\n      selected,\n    }\n  }\n}\n\nexport function wsUnassignAccount(accountId) {\n  return {\n    type: MUTATE,\n    action: GROUPS_ACCOUNTS_UNASSIGN,\n    payload: {\n      accountId,\n    }\n  }\n}\n\nexport function wsAutomateGroupsCreation(numberOfGroups) {\n  return {\n    type: MUTATE,\n    action: GROUPS_AUTOMATE_CREATION,\n    payload: {\n      numberOfGroups,\n    }\n  }\n}\n\n// update state in components ControlRoom socket action creator\nexport function swUpdateControlRoom(state) {\n  return {\n    type: ACTION,\n    action: SESSION_STATE_GET,\n    payload: state,\n  }\n}\n\n// update state in components ControlRoom socket action creator\nexport function wsSurveyStepAll(accountList) {\n  return {\n    type: MUTATE,\n    action: SURVEY_STEP_ALL,\n    payload: accountList,\n  }\n}\n\n// update state in components ControlRoom socket action creator\nexport function wsSubmitSurveyInfo(info) {\n  return {\n    type: MUTATE,\n    action: SUBMIT_SURVEY_INFO,\n    payload: info,\n  }\n}\n"],"sourceRoot":"/source/"}