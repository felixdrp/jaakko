{"version":3,"sources":["websock-message/server-mutate.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;;AAKA;;;;AAEA;;;;;;;;;;;wEAUe;AAAA,QAAwB,MAAxB,SAAwB,MAAxB;AAAA,QAAgC,OAAhC,SAAgC,OAAhC;AAAA,QAAyC,EAAzC,SAAyC,EAAzC;AAAA,QAA6C,KAA7C,SAA6C,KAA7C;AAAA,QAIL,MAJK;AAAA;AAAA;AAAA;AAAA;AAAA,0BACL,MADK;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAIU,cACjB;AACE,yBAAW,QAAQ,SADrB;AAEE,wBAAU,QAAQ,QAFpB;AAGE,qBAAO,QAAQ,KAHjB;AAIE,wBAAU,QAAQ,QAJpB;AAKE,+BAAiB,QAAQ;AAL3B,aADiB,wBAJV;;AAAA;AAIL,kBAJK;;AAcT,gBAAI,aAAa,MAAjB,EAAyB;AACvB;AACA;AACA,sBAAQ,KAAR,CAAc,OAAO,OAArB;AACD;AACD;AACA;AACA,eAAG,WAAH,GAAiB,QAAQ,KAAzB;AACA;;AAEA;AAxBS,6CAyBF,IAzBE;;AAAA;AA4BT;AACA,eAAG,IAAH,CACE,yBACE;AACE,oBAAM,QADR;AAEE,sBAAQ,uBAFV;AAGE,uBAAS;AAHX,aADF,CADF;AASA;AACA;AAvCS,6CAwCF,IAxCE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;WAAe,M;;;;SAAA,M;;AAb9B","file":"websock-message/server-mutate.js","sourcesContent":["import {\n  LOGIN_ACCOUNT,\n  REGISTER_ACCOUNT,\n} from './server-actions'\n// Default Input fields type and options\nimport { fieldsOptions } from '../config'\n\n/**\n * Mutate will process an asynchronous message from a client send by a websocket\n *\n * @param {Object} An object whose values correspond to:\n *                    action: Async action to process\n *                    payload: The info to process\n *                    ws: websocket that trigger the message.\n * @returns {}\n */\n\nexport default async function mutate({ action, payload, ws, store }) {\n  switch (action) {\n    case REGISTER_ACCOUNT:\n      // Register an Account\n      let result = await createAccount(\n        {\n          firstName: payload.firstName,\n          surename: payload.surename,\n          email: payload.email,\n          password: payload.password,\n          reEnterPassword: payload.password,\n        },\n        fieldsOptions\n      )\n      if ('message' in result) {\n        // Error try register again.\n        // Send message of error to the client.\n        console.error(result.message)\n      }\n      // User registered!!\n      // To give websocket.accountCode the account email\n      ws.accountCode = payload.email\n      // Register the user in the server store.\n\n      // Ready to asign to a group\n      return true\n      break;\n    case LOGIN_ACCOUNT:\n      // Send email error\n      ws.send(\n        JSON.stringify(\n          {\n            type: 'ACTION',\n            action: 'LOGIN_ERROR_BAD_EMAIL',\n            payload: null,\n          }\n        )\n      )\n      // console.log('send error login')\n      // console.log(ws.name +' '+ message.type + ' ' + message.payload.email)\n      return true\n      break;\n  }\n}\n"],"sourceRoot":"/source/"}