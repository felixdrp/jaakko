{"version":3,"sources":["jaakko-client.js"],"names":["initialState","window","__INITIAL_STATE__","middleware","store","account","routing","task","devToolsExtension","f","history","ws","WebSocket","location","host","websocket","onmessage","event","message","console","log","data","test","JSON","parse","type","payload","email","dispatch","action","login20Accounts","i","send","password","HiperApp","props","children","Component","childContextTypes","PropTypes","object","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAGA;;;;AAKA;AACA;AAnBA;AAoBA,IAAMA,eAAeC,OAAOC,iBAAP,IAA4B,EAAjD;;AAEA;AACA;;AAEA;;;AAbA;AAcA,IAAMC,aAAa,oEAAnB;;AAEA;AACA,IAAMC,QAAQ,wBACZ,4BAAgB;AACdC,kCADc;AAEdC,0CAFc;AAGdC;AAHc,CAAhB,CADY,EAMZP,YANY,EAOZ,oBACE,4BAAgBG,UAAhB,CADF;AAEE;AACAF,OAAOO,iBAAP,GAA2BP,OAAOO,iBAAP,EAA3B,GAAwD;AAAA,SAAKC,CAAL;AAAA,CAH1D,CAPY,CAAd;AAaA;AACA,IAAMC,UAAU,yEAAqCN,KAArC,CAAhB;;AAEA;AACA;AACA,IAAIO,KAAK,IAAIC,SAAJ,CAAe,WAAWC,SAASC,IAAnC,CAAT;AACA;AACA,IAAIC,YAAY,8BAAoBJ,EAApB,CAAhB;;AAEA;AACAA,GAAGK,SAAH,GAAe,UAACC,KAAD,EAAW;AACxB;AACA;AACA,MAAIC,gBAAJ;AACAC,UAAQC,GAAR,CAAa,QAAQH,MAAMI,IAA3B;AACA,MAAK,WAAWC,IAAX,CAAgBL,MAAMI,IAAtB,CAAL,EAAmC;AACjCH,cAAUK,KAAKC,KAAL,CAAWP,MAAMI,IAAjB,CAAV;AACD,GAFD,MAEO;AACLF,YAAQC,GAAR,CAAYH,MAAMI,IAAlB;AACA;AACD;AACDF,UAAQC,GAAR,CAAa,QAAQ,yBAAeH,MAAMI,IAArB,CAArB;;AAEA,UAASH,QAAQO,IAAjB;AACE;AACA,SAAK,QAAL;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACA,SAAK,OAAL;AACEN,cAAQC,GAAR,CAAYF,QAAQO,IAAR,GAAe,GAAf,GAAqBP,QAAQQ,OAAR,CAAgBC,KAArC,IAA8C,EAA1D;AACA;AACF;AACA;AACE;AACAR,cAAQC,GAAR,CAAYF,QAAQO,IAAR,GAAe,GAAf,GAAqBP,QAAQQ,OAA7B,IAAwC,EAApD;AACAtB,YAAMwB,QAAN,CAAgB,EAAEH,MAAMP,QAAQW,MAAhB,EAAwBH,SAASR,QAAQQ,OAAzC,EAAhB;AAlBJ;AAoBD,CAjCD;;AAmCA;AACA;AACA;AACA;;AAEA,SAASI,eAAT,GAA2B;AACzB,MAAIH,QAAQ,SAARA,KAAQ,CAACI,CAAD;AAAA,qBAAeA,CAAf;AAAA,GAAZ;AACA,OAAK,IAAIA,IAAI,CAAb,EAAgBA,IAAI,EAApB,EAAwBA,GAAxB,EAA6B;AAC3BhB,cAAUiB,IAAV,CAAgB,EAAEP,MAAM,QAAR,EAAkBI,QAAQ,eAA1B,EAA2CH,SAAS,EAACC,OAAOA,MAAMI,CAAN,CAAR,EAAkBE,UAAU,MAA5B,EAApD,EAAhB;AACD;AACF;AACD;;;AAGA;AACA;AACA;;AAEA;;IACMC,Q;;;;;;;;;;sCACc;AAChB,aAAO,EAACnB,WAAWA,SAAZ,EAAP;AACD;;;6BAEQ;AACP,aAAO;AAAA;AAAA,UAAK,IAAG,UAAR;AAAoB,aAAKoB,KAAL,CAAWC;AAA/B,OAAP;AACD;;;EAPoB,gBAAMC,S;;AAU7BH,SAASI,iBAAT,GAA6B;AACzBvB,aAAW,gBAAMwB,SAAN,CAAgBC;AADF,CAA7B;;AAIA,sBACE;AAAA;AAAA,IAAU,OAAOpC,KAAjB;AACE;AAAC,YAAD;AAAA;AACG,0BAAQM,OAAR;AADH;AADF,CADF,EAOE+B,SAASC,cAAT,CAAwB,KAAxB,CAPF","file":"jaakko-client.js","sourcesContent":["// *** Load react and react-dom ***\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport { browserHistory } from 'react-router'\nimport { syncHistoryWithStore, routerReducer, routerMiddleware, push  } from 'react-router-redux'\nimport Routes from './routes';\nimport { createHistory } from 'history';\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\n// *** Load store reducers ***\nimport {\n  account,\n  task,\n} from './reducers/client-reducers'\n\n// The initial state from server-generated HTML\n// have a look to server code.\nconst initialState = window.__INITIAL_STATE__ || {}\n\n// // https://github.com/rackt/history/blob/master/docs/GettingStarted.md\n// const history = createHistory()\n\n// https://github.com/reactjs/react-router-redux\nconst middleware = routerMiddleware(browserHistory)\n\n// // Create Redux store with initial state\nconst store = createStore(\n  combineReducers({\n    account,\n    routing: routerReducer,\n    task,\n  }),\n  initialState,\n  compose(\n    applyMiddleware(middleware),\n    // Redux devToolsExtension\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n  )\n)\n// Create an enhanced history that syncs navigation events with the store\nconst history = syncHistoryWithStore(browserHistory, store)\n\n// console.log(store.getState())\n// Connection example: \"wss://localhost:8008\"\nvar ws = new WebSocket( 'wss://' + location.host )\n// var websocket used to send data.\nvar websocket = new WebSocketSimple(ws)\n\n// Llegan mensajes del servidor:\nws.onmessage = (event) => {\n  // Check the query.\n  // Process action.\n  let message\n  console.log( '>>>' + event.data )\n  if ( /^\\{.*\\}$/.test(event.data) ) {\n    message = JSON.parse(event.data)\n  } else {\n    console.log(event.data)\n    return\n  }\n  console.log( '>>>' + JSON.stringify(event.data) )\n\n  switch ( message.type ) {\n    // Process message of type MUTATE\n    case 'MUTATE':\n      // mutate({\n      //   action: message.action,\n      //   payload: message.payload,\n      //   websocket,\n      //   store\n      // })\n      break\n    // Process message of type QUERY\n    case 'QUERY':\n      console.log(message.type + ' ' + message.payload.email || '')\n      break\n    // Process message of type ACTIONS\n    default:\n      // dispatch 'ACTIONS'\n      console.log(message.type + ' ' + message.payload || '')\n      store.dispatch( { type: message.action, payload: message.payload } )\n  }\n}\n\n// Simulate a login...\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'me@me.me', password: 'algo'} } ), 2000)\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'felixdrp@gmail.com', password: '1234'} } ), 1000)\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'rpsoft@gmail.com', password: '1234'} } ), 1000)\n\nfunction login20Accounts() {\n  let email = (i) => `lucas${i}.George@sky.wl`\n  for (let i = 1; i < 21; i++) {\n    websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email: email(i), password: '1234'} } )\n  }\n}\n// setTimeout( () => login20Accounts(), 1000)\n\n\n// {\"firstName\":\"Jesus\",\"surname\":\"RP\",\"email\":\"rpsoft@gmail.com\",\"password\":\"1234\",\"reEnterPassword\":\"1234\"}\n// Move the client to a web page...\n// setTimeout( () => store.dispatch(push('/modules/example')), 3000)\n\n// Class to pass the websocket with context to the rest of components.\nclass HiperApp extends React.Component {\n  getChildContext() {\n    return {websocket: websocket};\n  }\n\n  render() {\n    return <div id='hiperApp'>{this.props.children}</div>;\n  }\n}\n\nHiperApp.childContextTypes = {\n    websocket: React.PropTypes.object\n  }\n\nrender(\n  <Provider store={store}>\n    <HiperApp>\n      {Routes( history )}\n    </HiperApp>\n  </Provider>\n  ,\n  document.getElementById('app')\n)\n"]}