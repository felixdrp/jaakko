{"version":3,"sources":["jaakko-client.js"],"names":["initialState","window","__INITIAL_STATE__","middleware","store","account","routing","devToolsExtension","f","history","console","log","getState","ws","WebSocket","location","host","websocket","onmessage","event","message","data","test","JSON","parse","type","mutate","action","payload","email","dispatch","HiperApp","props","children","Component","childContextTypes","PropTypes","object","document","getElementById"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAIA;;;;AAEA;AACA;AAjBA;AAkBA,IAAMA,eAAeC,OAAOC,iBAAP,IAA4B,EAAjD;;AAEA;AACA;;AAEA;;;AAXA;AACA;AAWA,IAAMC,aAAa,oEAAnB;;AAEA;AACA,IAAMC,QAAQ,wBACZ,4BAAgB;AACdC,kCADc;AAEdC;AAFc,CAAhB,CADY,EAKZN,YALY,EAMZ,oBACE,4BAAgBG,UAAhB,CADF;AAEE;AACAF,OAAOM,iBAAP,GAA2BN,OAAOM,iBAAP,EAA3B,GAAwD;AAAA,SAAKC,CAAL;AAAA,CAH1D,CANY,CAAd;AAYA;AACA,IAAMC,UAAU,yEAAqCL,KAArC,CAAhB;;AAEAM,QAAQC,GAAR,CAAYP,MAAMQ,QAAN,EAAZ;AACA;AACA,IAAIC,KAAK,IAAIC,SAAJ,CAAe,WAAWC,SAASC,IAAnC,CAAT;AACA;AACA,IAAIC,YAAY,8BAAoBJ,EAApB,CAAhB;;AAEA;AACAA,GAAGK,SAAH,GAAe,UAACC,KAAD,EAAW;AACxB;AACA;AACA,MAAIC,gBAAJ;AACAV,UAAQC,GAAR,CAAa,QAAQQ,MAAME,IAA3B;AACA,MAAK,WAAWC,IAAX,CAAgBH,MAAME,IAAtB,CAAL,EAAmC;AACjCD,cAAUG,KAAKC,KAAL,CAAWL,MAAME,IAAjB,CAAV;AACD,GAFD,MAEO;AACLX,YAAQC,GAAR,CAAYQ,MAAME,IAAlB;AACA;AACD;AACDX,UAAQC,GAAR,CAAa,QAAQ,yBAAeQ,MAAME,IAArB,CAArB;;AAEA,UAASD,QAAQK,IAAjB;AACE;AACA,SAAK,QAAL;AACEC,aAAO;AACLC,gBAAQP,QAAQO,MADX;AAELC,iBAASR,QAAQQ,OAFZ;AAGLX,4BAHK;AAILb;AAJK,OAAP;AAMA;AACF;AACA,SAAK,OAAL;AACEM,cAAQC,GAAR,CAAYS,QAAQK,IAAR,GAAe,GAAf,GAAqBL,QAAQQ,OAAR,CAAgBC,KAArC,IAA8C,EAA1D;AACA;AACF;AACA;AACE;AACAnB,cAAQC,GAAR,CAAYS,QAAQK,IAAR,GAAe,GAAf,GAAqBL,QAAQQ,OAA7B,IAAwC,EAApD;AACAxB,YAAM0B,QAAN,CAAgB,EAAEL,MAAML,QAAQO,MAAhB,EAAwBC,SAASR,QAAQQ,OAAzC,EAAhB;AAlBJ;AAoBD,CAjCD;;AAmCA;AACA;AACA;;AAEA;AACA;;AAEA;;IACMG,Q;;;;;;;;;;sCACc;AAChB,aAAO,EAACd,WAAWA,SAAZ,EAAP;AACD;;;6BAEQ;AACP,aAAO;AAAA;AAAA,UAAK,IAAG,UAAR;AAAoB,aAAKe,KAAL,CAAWC;AAA/B,OAAP;AACD;;;EAPoB,gBAAMC,S;;AAU7BH,SAASI,iBAAT,GAA6B;AACzBlB,aAAW,gBAAMmB,SAAN,CAAgBC;AADF,CAA7B;;AAIA,sBACE;AAAA;AAAA,IAAU,OAAOjC,KAAjB;AACE;AAAC,YAAD;AAAA;AACG,0BAAQK,OAAR;AADH;AADF,CADF,EAOE6B,SAASC,cAAT,CAAwB,KAAxB,CAPF","file":"jaakko-client.js","sourcesContent":["// *** Load react and react-dom ***\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport { browserHistory } from 'react-router'\nimport { syncHistoryWithStore, routerReducer, routerMiddleware, push  } from 'react-router-redux'\nimport Routes from './routes';\nimport { createHistory } from 'history';\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\n// console.log(Object.keys(reactRR))\n// *** Load store reducers ***\nimport { account } from './reducers/client-reducers'\n\n// The initial state from server-generated HTML\n// have a look to server code.\nconst initialState = window.__INITIAL_STATE__ || {}\n\n// // https://github.com/rackt/history/blob/master/docs/GettingStarted.md\n// const history = createHistory()\n\n// https://github.com/reactjs/react-router-redux\nconst middleware = routerMiddleware(browserHistory)\n\n// // Create Redux store with initial state\nconst store = createStore(\n  combineReducers({\n    account,\n    routing: routerReducer,\n  }),\n  initialState,\n  compose(\n    applyMiddleware(middleware),\n    // Redux devToolsExtension\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n  )\n)\n// Create an enhanced history that syncs navigation events with the store\nconst history = syncHistoryWithStore(browserHistory, store)\n\nconsole.log(store.getState())\n// Connection example: \"wss://localhost:8008\"\nvar ws = new WebSocket( 'wss://' + location.host )\n// var websocket used to send data.\nvar websocket = new WebSocketSimple(ws)\n\n// Llegan mensajes del servidor:\nws.onmessage = (event) => {\n  // Check the query.\n  // Process action.\n  let message\n  console.log( '>>>' + event.data )\n  if ( /^\\{.*\\}$/.test(event.data) ) {\n    message = JSON.parse(event.data)\n  } else {\n    console.log(event.data)\n    return\n  }\n  console.log( '>>>' + JSON.stringify(event.data) )\n\n  switch ( message.type ) {\n    // Process message of type MUTATE\n    case 'MUTATE':\n      mutate({\n        action: message.action,\n        payload: message.payload,\n        websocket,\n        store\n      })\n      break\n    // Process message of type QUERY\n    case 'QUERY':\n      console.log(message.type + ' ' + message.payload.email || '')\n      break\n    // Process message of type ACTIONS\n    default:\n      // dispatch 'ACTIONS'\n      console.log(message.type + ' ' + message.payload || '')\n      store.dispatch( { type: message.action, payload: message.payload } )\n  }\n}\n\n// Simulate a login...\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'me@me.me', password: 'algo'} } ), 2000)\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'felixdrp@gmail.com', password: '1234'} } ), 1000)\n\n// Move the client to a web page...\n// setTimeout( () => store.dispatch(push('/modules/example')), 3000)\n\n// Class to pass the websocket with context to the rest of components.\nclass HiperApp extends React.Component {\n  getChildContext() {\n    return {websocket: websocket};\n  }\n\n  render() {\n    return <div id='hiperApp'>{this.props.children}</div>;\n  }\n}\n\nHiperApp.childContextTypes = {\n    websocket: React.PropTypes.object\n  }\n\nrender(\n  <Provider store={store}>\n    <HiperApp>\n      {Routes( history )}\n    </HiperApp>\n  </Provider>\n  ,\n  document.getElementById('app')\n)\n"],"sourceRoot":"/source/"}