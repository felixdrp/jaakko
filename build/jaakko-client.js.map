{"version":3,"sources":["jaakko-client.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA;;;;AACA;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;AACA;;;;AAIA;;;;AAEA;AACA;AAjBA;AAkBA,IAAM,eAAe,OAAO,iBAAP,IAA4B,EAAjD;;AAEA;AACA;;AAEA;;;AAXA;AACA;AAWA,IAAM,aAAa,oEAAnB;;AAEA;AACA,IAAM,QAAQ,wBACZ,4BAAgB;AACd,kCADc;AAEd;AAFc,CAAhB,CADY,EAKZ,YALY,EAMZ,oBACE,4BAAgB,UAAhB,CADF;AAEE;AACA,OAAO,iBAAP,GAA2B,OAAO,iBAAP,EAA3B,GAAwD;AAAA,SAAK,CAAL;AAAA,CAH1D,CANY,CAAd;AAYA;AACA,IAAM,UAAU,yEAAqC,KAArC,CAAhB;;AAEA,QAAQ,GAAR,CAAY,MAAM,QAAN,EAAZ;AACA;AACA,IAAI,KAAK,IAAI,SAAJ,CAAe,WAAW,SAAS,IAAnC,CAAT;AACA;AACA,IAAI,YAAY,8BAAoB,EAApB,CAAhB;;AAEA;AACA,GAAG,SAAH,GAAe,UAAC,KAAD,EAAW;AACxB;AACA;AACA,MAAI,gBAAJ;AACA,UAAQ,GAAR,CAAa,QAAQ,MAAM,IAA3B;AACA,MAAK,WAAW,IAAX,CAAgB,MAAM,IAAtB,CAAL,EAAmC;AACjC,cAAU,KAAK,KAAL,CAAW,MAAM,IAAjB,CAAV;AACD,GAFD,MAEO;AACL,YAAQ,GAAR,CAAY,MAAM,IAAlB;AACA;AACD;AACD,UAAQ,GAAR,CAAa,QAAQ,yBAAe,MAAM,IAArB,CAArB;;AAEA,UAAS,QAAQ,IAAjB;AACE;AACA,SAAK,QAAL;AACE,aAAO;AACL,gBAAQ,QAAQ,MADX;AAEL,iBAAS,QAAQ,OAFZ;AAGL,4BAHK;AAIL;AAJK,OAAP;AAMA;AACF;AACA,SAAK,OAAL;AACE,cAAQ,GAAR,CAAY,QAAQ,IAAR,GAAe,GAAf,GAAqB,QAAQ,OAAR,CAAgB,KAArC,IAA8C,EAA1D;AACA;AACF;AACA;AACE;AACA,cAAQ,GAAR,CAAY,QAAQ,IAAR,GAAe,GAAf,GAAqB,QAAQ,OAA7B,IAAwC,EAApD;AACA,YAAM,QAAN,CAAgB,EAAE,MAAM,QAAQ,MAAhB,EAAwB,SAAS,QAAQ,OAAzC,EAAhB;AAlBJ;AAoBD,CAjCD;;AAmCA;AACA;AACA,WAAY;AAAA,SAAM,UAAU,IAAV,CAAgB,EAAE,MAAM,QAAR,EAAkB,QAAQ,eAA1B,EAA2C,SAAS,EAAC,OAAM,oBAAP,EAA6B,UAAU,MAAvC,EAApD,EAAhB,CAAN;AAAA,CAAZ,EAA0I,IAA1I;;AAEA;AACA;;AAEA;;IACM,Q;;;;;;;;;;sCACc;AAChB,aAAO,EAAC,WAAW,SAAZ,EAAP;AACD;;;6BAEQ;AACP,aAAO;AAAA;AAAA,UAAK,IAAG,UAAR;AAAoB,aAAK,KAAL,CAAW;AAA/B,OAAP;AACD;;;EAPoB,gBAAM,S;;AAU7B,SAAS,iBAAT,GAA6B;AACzB,aAAW,gBAAM,SAAN,CAAgB;AADF,CAA7B;;AAIA,sBACE;AAAA;AAAA,IAAU,OAAO,KAAjB;AACE;AAAC,YAAD;AAAA;AACG,0BAAQ,OAAR;AADH;AADF,CADF,EAOE,SAAS,cAAT,CAAwB,KAAxB,CAPF","file":"jaakko-client.js","sourcesContent":["// *** Load react and react-dom ***\nimport React from 'react'\nimport { render } from 'react-dom'\n\nimport { applyMiddleware, compose, createStore, combineReducers } from 'redux'\nimport { Provider } from 'react-redux'\nimport { browserHistory } from 'react-router'\nimport { syncHistoryWithStore, routerReducer, routerMiddleware, push  } from 'react-router-redux'\nimport Routes from './routes';\nimport { createHistory } from 'history';\nimport WebSocketSimple from './websocket-message/websocket-simple'\n\n// console.log(Object.keys(reactRR))\n// *** Load store reducers ***\nimport { account } from './reducers/client-reducers'\n\n// The initial state from server-generated HTML\n// have a look to server code.\nconst initialState = window.__INITIAL_STATE__ || {}\n\n// // https://github.com/rackt/history/blob/master/docs/GettingStarted.md\n// const history = createHistory()\n\n// https://github.com/reactjs/react-router-redux\nconst middleware = routerMiddleware(browserHistory)\n\n// // Create Redux store with initial state\nconst store = createStore(\n  combineReducers({\n    account,\n    routing: routerReducer,\n  }),\n  initialState,\n  compose(\n    applyMiddleware(middleware),\n    // Redux devToolsExtension\n    window.devToolsExtension ? window.devToolsExtension() : f => f\n  )\n)\n// Create an enhanced history that syncs navigation events with the store\nconst history = syncHistoryWithStore(browserHistory, store)\n\nconsole.log(store.getState())\n// Connection example: \"wss://localhost:8008\"\nvar ws = new WebSocket( 'wss://' + location.host )\n// var websocket used to send data.\nvar websocket = new WebSocketSimple(ws)\n\n// Llegan mensajes del servidor:\nws.onmessage = (event) => {\n  // Check the query.\n  // Process action.\n  let message\n  console.log( '>>>' + event.data )\n  if ( /^\\{.*\\}$/.test(event.data) ) {\n    message = JSON.parse(event.data)\n  } else {\n    console.log(event.data)\n    return\n  }\n  console.log( '>>>' + JSON.stringify(event.data) )\n\n  switch ( message.type ) {\n    // Process message of type MUTATE\n    case 'MUTATE':\n      mutate({\n        action: message.action,\n        payload: message.payload,\n        websocket,\n        store\n      })\n      break\n    // Process message of type QUERY\n    case 'QUERY':\n      console.log(message.type + ' ' + message.payload.email || '')\n      break\n    // Process message of type ACTIONS\n    default:\n      // dispatch 'ACTIONS'\n      console.log(message.type + ' ' + message.payload || '')\n      store.dispatch( { type: message.action, payload: message.payload } )\n  }\n}\n\n// Simulate a login...\n// setTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'me@me.me', password: 'algo'} } ), 2000)\nsetTimeout( () => websocket.send( { type: 'MUTATE', action: 'LOGIN_ACCOUNT', payload: {email:'felixdrp@gmail.com', password: '1234'} } ), 1000)\n\n// Move the client to a web page...\n// setTimeout( () => store.dispatch(push('/modules/example')), 3000)\n\n// Class to pass the websocket with context to the rest of components.\nclass HiperApp extends React.Component {\n  getChildContext() {\n    return {websocket: websocket};\n  }\n\n  render() {\n    return <div id='hiperApp'>{this.props.children}</div>;\n  }\n}\n\nHiperApp.childContextTypes = {\n    websocket: React.PropTypes.object\n  }\n\nrender(\n  <Provider store={store}>\n    <HiperApp>\n      {Routes( history )}\n    </HiperApp>\n  </Provider>\n  ,\n  document.getElementById('app')\n)\n"],"sourceRoot":"/source/"}