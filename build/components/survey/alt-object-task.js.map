{"version":3,"sources":["components/survey/alt-object-task.js"],"names":["AltObjectTask","props","accountId","account","email","state","entries","username","firstname","currentEntry","id","btoa","slice","Date","now","title","description","creator","rating","timeSubmitted","similarTo","similarityHide","taskType","event","index","value","entryField","split","setState","textColor","context","muiTheme","palette","isSubmitted","type","tasktype","text","groupTasks","tasks","display","padding","margin","maxWidth","minWidth","fontSize","color","paddingTop","map","item","i","marginBottom","gatherData","marginTop","marginLeft","handleEntryChange","width","e","addEntry","backgroundColor","sort","a","b","entry","includes","groupType","firstName","surname","contextTypes","PropTypes","object","isRequired","router","websocket","o2","JSON","parse","send","newEntry","alerthing","alert","console","log","submit","propTypes","mapStateToProps","ownProps","task","taskLength","length","payload","undefined"],"mappings":"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","file":"alt-object-task.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\n\nimport TextField from 'material-ui/TextField';\nimport FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport Slider from 'material-ui/Slider';\nimport {RadioButton, RadioButtonGroup} from 'material-ui/RadioButton';\n\nimport Timer from './timer'\n\n\nimport { connect } from 'react-redux'\n\nimport Wait from './wait'\n\nimport {\n ActionShop,\n ActionShoppingBasket,\n ActionSpeakerNotesOff,\n ActionSpeakerNotes,\n ActionSpellcheck,\n ActionStars,\n ActionStore,\n} from 'material-ui/svg-icons';\n\nimport {\n  swTaskIdeaAdd,\n} from '../../websocket-message/server-actions'\n\n\nclass AltObjectTask extends Component {\n\n  constructor(props) {\n    super(props);\n    let accountId = this.props.account.email || 'unassigned'\n    this.state = {\n     entries:[],\n     username : this.props.account.firstname,\n     currentEntry : {\n       id : btoa( accountId.slice(0,2)+(Date.now()/1000) ),\n       title : '',\n       description : '',\n       creator : accountId,\n       rating : [],\n       timeSubmitted : null,\n       similarTo : [],\n       similarityHide : false,\n     }\n    };\n\n    this.taskType = null\n  }\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired,\n    websocket: React.PropTypes.object,\n  };\n\n  /**\n  * Just missing the account information.\n  */\n  addEntry = (e) => {\n\n    // var entries  = this.state.entries.slice()\n    // entries.push({  id : btoa(this.state.username.slice(0,2)+(Date.now()/1000)),\n    //                 title : '',\n    //                 description : '',\n    //                 creator : null,\n    //                 rating : [],\n    //                 timeSubmitted : null,\n    //                 similarTo : [],\n    //               });\n\n    if (\n      this.state.currentEntry.title == '' ||\n      this.state.currentEntry.description == ''\n    ) {\n      return\n    }\n\n    let accountId = this.props.account.email || 'unassigned'\n    var o2 = JSON.parse(JSON.stringify(this.state.currentEntry));\n    o2.timeSubmitted = Date.now();\n\n    this.context.websocket.send(\n      swTaskIdeaAdd( o2 )\n    )\n\n    // entries.push(o2);\n\n    // this.setState({entries : entries });\n\n    var newEntry = {\n      id : btoa( accountId.slice(0,2)+(Date.now()/1000) ),\n      title : '',\n      description : '',\n      creator : accountId,\n      rating : [],\n      timeSubmitted : null,\n      similarTo : [],\n      similarityHide : false,\n    };\n\n    this.setState({currentEntry : newEntry});\n  }\n\n  // addGroupEntry = (entry) => {\n  //   var entries  = this.state.groupEntries.slice()\n  //   entries.push({id : ('groupEntry'+entries.length), title : entry.title ,description : entry.description});\n  //   this.setState({groupEntries : entries });\n  // }\n\n  alerthing = () => {\n    alert('boom');\n  }\n\n  handleEntryChange(event, index, value, id) {\n    //var entries  = this.state.entries.slice()\n    //\n    // var entryId = id.split(\" \")[0]\n    //\n    var entryField = id.split(\" \")[1];\n    //\n    // this.alterEntry (entries, entryId, entryField, value);\n    var currentEntry = this.state.currentEntry;\n    currentEntry[entryField] = value;\n\n    this.setState(currentEntry : currentEntry);\n\n    //this.setState({entries : entries });\n  }\n\n  // alterEntry  =  (entries, id, field, value) => {\n  //   for (var e in entries ){\n  //         var entry = entries[e]\n  //         if ( entry.id == id ){\n  //           entries[e][field] = value;\n  //           return entries;\n  //         }\n  //   }\n  // }\n\n\n  gatherData = () => {\n    console.log( JSON.stringify(this.state) );\n    this.setState({isSubmitted : true});\n    // debugger\n    this.props.submit();\n  }\n\n//'_marker'\n  render() {\n\n    const { textColor } = this.context.muiTheme.palette;\n\n    if ( this.state.isSubmitted ) {\n\n      return ( <Wait/> )\n\n    }\n\n    if ( JSON.stringify(this.props.type) == \"{}\" || (this.props.type == null && !this.taskType) ) {\n      return <span></span>\n    }\n\n    let tasktype = this.props.type || this.taskType\n    this.taskType = tasktype\n\n\n    let title =  ( tasktype == 'alternativeObjectFigural' ) ?  'Alternative Objects Figural Task' : 'Alternative Objects Task';\n    let text = (( tasktype == 'alternativeObjectFigural' ) ?  'Come up with as many alternative objects for the figure below as possible.' : 'Come up with as many alternative objects for a stapler as possible.')+' \\n\tYou will have 7 minutes to complete the task. \\n \\n You can add a new entry by clicking on the new entry button';\n    let currentEntry = this.state.currentEntry;\n\n    let groupTasks = this.props.tasks;\n\n    return (\n      <div style={{display:'flex'}}>\n\n        <Card\n          style={{\n            padding: 30,\n            margin: '2% 3% 0%',\n            maxWidth: 900,\n            minWidth: 750,\n          }}\n        >\n          <CardHeader\n            title={title}\n            titleStyle={{\n              fontSize: 24,\n              color: textColor,\n            }}\n          />\n          <CardText\n            style={{\n              paddingTop: 0,\n            }}\n          >\n            {\n              text.split('\\n').map( (item,i) => { return <div key={i} style={{marginBottom:20}}>{item}</div>})\n            }\n\n            {\n              tasktype == 'alternativeObjectFigural' ?\n                <img\n                  style={{\n                    maxWidth: 300,\n                    minWidth: 250,\n                  }}\n                  src=\"http://bbsimg.ngfiles.com/1/2111000/ngbbs40837c1fadb3f.jpg\"\n                />\n              :\n              <div></div>\n            }\n            <Timer\n              limitTime={20}\n              timerCallback={ () => this.gatherData() }\n            ></Timer>\n\n            <div style={{marginTop:20}}>\n              <Card>\n                <CardText>\n                  Title: <TextField id={currentEntry.id+\" title\"}\n                    style={{marginLeft:10,}}\n                    value={this.state.currentEntry.title}\n                    onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' title'))}\n                         /><br/>\n                  Description: <TextField\n                    multiLine={true}\n                    rows={1}\n                    rowsMax={10}\n                    id={currentEntry.id+\" description\"}\n                    style={{marginLeft:10, width: '80%',}}\n                    value={this.state.currentEntry.description}\n                    onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' description'))}\n                               />\n                </CardText>\n              </Card>\n            </div>\n\n            <RaisedButton\n              id=\"newEntry\"\n              onClick={ (e) => this.addEntry(e) }\n              type=\"button\"\n              backgroundColor='rgb(124, 210, 118)'\n              style={{marginTop:20, }}\n            >\n              New Entry\n            </RaisedButton>\n          </CardText>\n        </Card>\n\n        {/* Group Entries */}\n        <Card\n          style={{\n            margin: '2% 0% 5%',\n            minWidth: 400,\n            backgroundColor: 'rgb(234, 233, 233)',\n          }}\n        >\n          <CardHeader\n            title='Group entries'\n            titleStyle={{\n              fontSize: 24,\n              color: textColor,\n            }}\n          />\n          <CardText\n            style={{\n              paddingTop: 0,\n            }}\n          >\n            {\n              groupTasks.sort( (a, b) => b.timeSubmitted - a.timeSubmitted\n              ).map( (entry,i) => {\n                return <div key={i} style={{padding:5}}>\n                  <Card>\n                    <CardHeader style={{padding:8}}>\n                      { [1, 3].includes(entry.groupType)? `Author: ${entry.firstName} ${entry.surname} > `: '' }\n                      { entry.title }\n                    </CardHeader>\n                    <CardText style={{padding:8}}>\n                      {entry.description}\n                    </CardText>\n                  </Card>\n                </div>\n              })\n            }\n          </CardText>\n\n        </Card>\n      </div>\n    )\n  }\n}\n\nAltObjectTask.propTypes = {\n  // addTodo: PropTypes.func.isRequired\n}\n\n//export default Question\n\nconst mapStateToProps = (state, ownProps = {}) => {\n  return {\n    firstName : state.account.firstName,\n    account: state.account,\n    tasks: state.task.tasks || [],\n    taskLength:  state.task.tasks ? state.task.tasks.length : 0,\n    type : state.task.payload != undefined? state.task.payload.taskType: null,\n  }\n}\n\nexport default connect(mapStateToProps)(AltObjectTask)\n"]}