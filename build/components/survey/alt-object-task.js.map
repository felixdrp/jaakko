{"version":3,"sources":["components/survey/alt-object-task.js"],"names":["AltObjectTask","props","addEntry","entries","state","slice","o2","JSON","parse","currentEntry","timeSubmitted","Date","now","push","setState","newEntry","id","btoa","title","description","creator","rating","similarTo","gatherData","alerthing","alert","console","log","username","event","index","value","entryField","split","textColor","context","muiTheme","palette","text","display","padding","margin","maxWidth","minWidth","fontSize","color","paddingTop","map","item","i","marginBottom","marginTop","marginLeft","handleEntryChange","width","backgroundColor","entry","contextTypes","PropTypes","object","isRequired","router","websocket","propTypes","mapStateToProps","firstName","account"],"mappings":"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","file":"components/survey/alt-object-task.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\n\nimport TextField from 'material-ui/TextField';\nimport FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport Slider from 'material-ui/Slider';\nimport {RadioButton, RadioButtonGroup} from 'material-ui/RadioButton';\n\nimport Timer from './timer'\n\n\nimport { connect } from 'react-redux'\n\nimport Wait from './wait'\n\nimport {\n ActionShop,\n ActionShoppingBasket,\n ActionSpeakerNotesOff,\n ActionSpeakerNotes,\n ActionSpellcheck,\n ActionStars,\n ActionStore,\n} from 'material-ui/svg-icons';\n\n\nclass AltObjectTask extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n     entries:[],\n     username : \"PACO PEREZ AVELLAN\",\n     currentEntry : {  id : btoa(\"PACO PEREZ AVELLAN\".slice(0,2)+(Date.now()/1000)),\n       title : '',\n       description : '',\n       creator : null,\n       rating : [],\n       timeSubmitted : null,\n       similarTo : [],\n     }\n    };\n\n  }\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired,\n    websocket: React.PropTypes.object,\n  };\n\n  componentWillMount() {\n\n    //this.addGroupEntry({ title : 'Super paper clip' ,description : 'the super super paperclip that will rule them all'});\n  }\n\n//   handleSave(text) {\n//     if (text.length !== 0) {\n//       this.props.addTodo(text)\n//     }\n//   }\n//\n//   handleChange(event, index, value, name) {\n//     //debugger;\n//     this.setState({[name] : value})\n//   };\n//\n//   handleSliderChange(event, value, name) {\n// //    debugger;\n//     this.setState({[name] : value})\n//   };\n//\n//   handleRadioChange(event, value, name) {\n//\n//     this.setState({[name] : value})\n//   };\n\n  /**\n  * Just missing the account information.\n  */\n  addEntry = () => {\n    var entries  = this.state.entries.slice()\n    // entries.push({  id : btoa(this.state.username.slice(0,2)+(Date.now()/1000)),\n    //                 title : '',\n    //                 description : '',\n    //                 creator : null,\n    //                 rating : [],\n    //                 timeSubmitted : null,\n    //                 similarTo : [],\n    //               });\n\n    var o2 = JSON.parse(JSON.stringify(this.state.currentEntry));\n    o2.timeSubmitted = Date.now();\n\n    entries.push(o2);\n\n    this.setState({entries : entries });\n\n    var newEntry = { id : btoa(\"PACO PEREZ AVELLAN\".slice(0,2)+(Date.now()/1000)),\n      title : '',\n      description : '',\n      creator : null,\n      rating : [],\n      timeSubmitted : null,\n      similarTo : [],\n    };\n\n    this.setState({currentEntry : newEntry});\n\n    this.gatherData();\n  }\n\n  // addGroupEntry = (entry) => {\n  //   var entries  = this.state.groupEntries.slice()\n  //   entries.push({id : ('groupEntry'+entries.length), title : entry.title ,description : entry.description});\n  //   this.setState({groupEntries : entries });\n  // }\n\n  alerthing = () => {\n    alert('boom');\n  }\n\n  handleEntryChange(event, index, value, id) {\n    //var entries  = this.state.entries.slice()\n      //\n      // var entryId = id.split(\" \")[0]\n      //\n      var entryField = id.split(\" \")[1];\n      //\n      // this.alterEntry (entries, entryId, entryField, value);\n      var currentEntry = this.state.currentEntry;\n      currentEntry[entryField] = value;\n\n      this.setState(currentEntry : currentEntry);\n\n\n\n    //this.setState({entries : entries });\n  }\n\n  // alterEntry  =  (entries, id, field, value) => {\n  //   for (var e in entries ){\n  //         var entry = entries[e]\n  //         if ( entry.id == id ){\n  //           entries[e][field] = value;\n  //           return entries;\n  //         }\n  //   }\n  // }\n\n\n  gatherData = () => {\n\n      console.log(JSON.stringify(this.state));\n\n\n  }\n\n//'_marker'\n  render() {\n\n    const { textColor } = this.context.muiTheme.palette;\n\n    let title = 'Alternative Objects Task';\n    let text = `Come up with as many alternative objects for a stapler as possible. \\n\tYou will have 7 minutes to complete the task. \\n \\n You can add a new entry by clicking on the new entry button`;\n    let currentEntry = this.state.currentEntry;\n\n    return (\n      <div style={{display:'flex'}}>\n\n          <Card\n            style={{\n              padding: 30,\n              margin: '2% 3% 0%',\n              maxWidth: 900,\n              minWidth: 750,\n            }}\n          >\n            <CardHeader\n              title={title}\n              titleStyle={{\n                fontSize: 24,\n                color: textColor,\n              }}\n            />\n            <CardText\n              style={{\n                paddingTop: 0,\n              }}\n              >\n              {\n                text.split('\\n').map( (item,i) => { return <div key={i} style={{marginBottom:20}}>{item}</div>})\n              }\n\n              <Timer timerCallback={ this.alerthing }></Timer>\n\n              <div style={{marginTop:20}}>\n                  <Card>\n                  <CardText>\n                      Title: <TextField id={currentEntry.id+\" title\"}\n                                        style={{marginLeft:10,}}\n                                        value={this.state.currentEntry.title}\n                                        onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' title'))}\n                             /><br/>\n                      Description: <TextField\n                                    multiLine={true}\n                                    rows={1}\n                                    rowsMax={10}\n                                    id={currentEntry.id+\" description\"}\n                                    style={{marginLeft:10, width: '80%',}}\n                                    value={this.state.currentEntry.description}\n                                    onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' description'))}\n                             />\n                  </CardText>\n                 </Card>\n              </div>\n\n              <RaisedButton\n                id=\"newEntry\"\n                onClick={ this.addEntry }\n                type=\"button\"\n                backgroundColor='rgb(124, 210, 118)'\n                style={{marginTop:20, }}\n              >\n                New Entry\n              </RaisedButton>\n\n            </CardText>\n\n          </Card>\n\n          <Card  style={{\n\n              margin: '2% 0% 5%',\n              minWidth: 400,\n              backgroundColor: 'rgb(234, 233, 233)',\n            }}\n          >\n            <CardHeader\n              title='Group entries'\n              titleStyle={{\n                fontSize: 24,\n                color: textColor,\n              }}\n            />\n            <CardText\n              style={{\n                paddingTop: 0,\n              }}\n              >\n\n              {\n                this.state.entries.map( (entry,i) => {\n\n                  return <div key={i} style={{padding:5}}>\n                                <Card>\n                                  <CardHeader style={{padding:8}}>\n                                    {entry.title}\n                                  </CardHeader>\n                                  <CardText style={{padding:8}}>\n                                    {entry.description}\n                                  </CardText>\n                                </Card>\n                        </div>\n                })\n              }\n\n              </CardText>\n\n          </Card>\n      </div>\n    )\n  }\n}\n\nAltObjectTask.propTypes = {\n  // addTodo: PropTypes.func.isRequired\n}\n\n//export default Question\n\nconst mapStateToProps = (state) => {\n  return {\n    firstName : state.account.firstName\n  }\n}\n\nexport default connect(mapStateToProps)(AltObjectTask)\n"],"sourceRoot":"/source/"}