{"version":3,"sources":["components/survey/alt-object-task.js"],"names":["AltObjectTask","props","accountId","account","email","state","entries","username","currentEntry","id","btoa","slice","Date","now","title","description","creator","rating","timeSubmitted","similarTo","event","index","value","entryField","split","setState","textColor","context","muiTheme","palette","text","display","padding","margin","maxWidth","minWidth","fontSize","color","paddingTop","map","item","i","marginBottom","alerthing","marginTop","marginLeft","handleEntryChange","width","e","addEntry","backgroundColor","entry","contextTypes","PropTypes","object","isRequired","router","websocket","o2","JSON","parse","send","push","newEntry","gatherData","alert","console","log","propTypes","mapStateToProps","firstName"],"mappings":"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","file":"components/survey/alt-object-task.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\n\nimport TextField from 'material-ui/TextField';\nimport FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport Slider from 'material-ui/Slider';\nimport {RadioButton, RadioButtonGroup} from 'material-ui/RadioButton';\n\nimport Timer from './timer'\n\n\nimport { connect } from 'react-redux'\n\nimport Wait from './wait'\n\nimport {\n ActionShop,\n ActionShoppingBasket,\n ActionSpeakerNotesOff,\n ActionSpeakerNotes,\n ActionSpellcheck,\n ActionStars,\n ActionStore,\n} from 'material-ui/svg-icons';\n\nimport {\n  swTaskIdeaAdd,\n} from '../../websocket-message/server-actions'\n\n\nclass AltObjectTask extends Component {\n\n  constructor(props) {\n    super(props);\n    let accountId = this.props.account.email || 'unassigned'\n    this.state = {\n     entries:[],\n     username : \"PACO PEREZ AVELLAN\",\n     currentEntry : {\n       id : btoa( accountId.slice(0,2)+(Date.now()/1000) ),\n       title : '',\n       description : '',\n       creator : accountId,\n       rating : [],\n       timeSubmitted : null,\n       similarTo : [],\n     }\n    };\n\n  }\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired,\n    websocket: React.PropTypes.object,\n  };\n\n  componentWillMount() {\n\n    //this.addGroupEntry({ title : 'Super paper clip' ,description : 'the super super paperclip that will rule them all'});\n  }\n\n//   handleSave(text) {\n//     if (text.length !== 0) {\n//       this.props.addTodo(text)\n//     }\n//   }\n//\n//   handleChange(event, index, value, name) {\n//     //debugger;\n//     this.setState({[name] : value})\n//   };\n//\n//   handleSliderChange(event, value, name) {\n// //    debugger;\n//     this.setState({[name] : value})\n//   };\n//\n//   handleRadioChange(event, value, name) {\n//\n//     this.setState({[name] : value})\n//   };\n\n  /**\n  * Just missing the account information.\n  */\n  addEntry = (e) => {\n\n    var entries  = this.state.entries.slice()\n    // entries.push({  id : btoa(this.state.username.slice(0,2)+(Date.now()/1000)),\n    //                 title : '',\n    //                 description : '',\n    //                 creator : null,\n    //                 rating : [],\n    //                 timeSubmitted : null,\n    //                 similarTo : [],\n    //               });\n\n    if (\n      this.state.currentEntry.title == '' ||\n      this.state.currentEntry.description == ''\n    ) {\n      return\n    }\n\n    let accountId = this.props.account.email || 'unassigned'\n    var o2 = JSON.parse(JSON.stringify(this.state.currentEntry));\n    o2.timeSubmitted = Date.now();\n\n    this.context.websocket.send(\n      swTaskIdeaAdd( o2 )\n    )\n\n    entries.push(o2);\n\n    this.setState({entries : entries });\n\n    var newEntry = {\n      id : btoa( accountId.slice(0,2)+(Date.now()/1000) ),\n      title : '',\n      description : '',\n      creator : accountId,\n      rating : [],\n      timeSubmitted : null,\n      similarTo : [],\n    };\n\n    this.setState({currentEntry : newEntry});\n\n    this.gatherData();\n  }\n\n  // addGroupEntry = (entry) => {\n  //   var entries  = this.state.groupEntries.slice()\n  //   entries.push({id : ('groupEntry'+entries.length), title : entry.title ,description : entry.description});\n  //   this.setState({groupEntries : entries });\n  // }\n\n  alerthing = () => {\n    alert('boom');\n  }\n\n  handleEntryChange(event, index, value, id) {\n    //var entries  = this.state.entries.slice()\n      //\n      // var entryId = id.split(\" \")[0]\n      //\n      var entryField = id.split(\" \")[1];\n      //\n      // this.alterEntry (entries, entryId, entryField, value);\n      var currentEntry = this.state.currentEntry;\n      currentEntry[entryField] = value;\n\n      this.setState(currentEntry : currentEntry);\n\n\n\n    //this.setState({entries : entries });\n  }\n\n  // alterEntry  =  (entries, id, field, value) => {\n  //   for (var e in entries ){\n  //         var entry = entries[e]\n  //         if ( entry.id == id ){\n  //           entries[e][field] = value;\n  //           return entries;\n  //         }\n  //   }\n  // }\n\n\n  gatherData = () => {\n\n      console.log(JSON.stringify(this.state));\n\n  }\n\n//'_marker'\n  render() {\n\n    const { textColor } = this.context.muiTheme.palette;\n\n    let title = 'Alternative Objects Task';\n    let text = `Come up with as many alternative objects for a stapler as possible. \\n\tYou will have 7 minutes to complete the task. \\n \\n You can add a new entry by clicking on the new entry button`;\n    let currentEntry = this.state.currentEntry;\n\n    return (\n      <div style={{display:'flex'}}>\n\n          <Card\n            style={{\n              padding: 30,\n              margin: '2% 3% 0%',\n              maxWidth: 900,\n              minWidth: 750,\n            }}\n          >\n            <CardHeader\n              title={title}\n              titleStyle={{\n                fontSize: 24,\n                color: textColor,\n              }}\n            />\n            <CardText\n              style={{\n                paddingTop: 0,\n              }}\n              >\n              {\n                text.split('\\n').map( (item,i) => { return <div key={i} style={{marginBottom:20}}>{item}</div>})\n              }\n\n              <Timer timerCallback={ this.alerthing }></Timer>\n\n              <div style={{marginTop:20}}>\n                  <Card>\n                  <CardText>\n                      Title: <TextField id={currentEntry.id+\" title\"}\n                                        style={{marginLeft:10,}}\n                                        value={this.state.currentEntry.title}\n                                        onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' title'))}\n                             /><br/>\n                      Description: <TextField\n                                    multiLine={true}\n                                    rows={1}\n                                    rowsMax={10}\n                                    id={currentEntry.id+\" description\"}\n                                    style={{marginLeft:10, width: '80%',}}\n                                    value={this.state.currentEntry.description}\n                                    onChange={ (event, index, value) => this.handleEntryChange(event, value, index, (currentEntry.id+' description'))}\n                             />\n                  </CardText>\n                 </Card>\n              </div>\n\n              <RaisedButton\n                id=\"newEntry\"\n                onClick={ (e) => this.addEntry(e) }\n                type=\"button\"\n                backgroundColor='rgb(124, 210, 118)'\n                style={{marginTop:20, }}\n              >\n                New Entry\n              </RaisedButton>\n\n            </CardText>\n\n          </Card>\n\n          <Card  style={{\n\n              margin: '2% 0% 5%',\n              minWidth: 400,\n              backgroundColor: 'rgb(234, 233, 233)',\n            }}\n          >\n            <CardHeader\n              title='Group entries'\n              titleStyle={{\n                fontSize: 24,\n                color: textColor,\n              }}\n            />\n            <CardText\n              style={{\n                paddingTop: 0,\n              }}\n              >\n\n              {\n                this.state.entries.map( (entry,i) => {\n\n                  return <div key={i} style={{padding:5}}>\n                                <Card>\n                                  <CardHeader style={{padding:8}}>\n                                    {entry.title}\n                                  </CardHeader>\n                                  <CardText style={{padding:8}}>\n                                    {entry.description}\n                                  </CardText>\n                                </Card>\n                        </div>\n                })\n              }\n\n              </CardText>\n\n          </Card>\n      </div>\n    )\n  }\n}\n\nAltObjectTask.propTypes = {\n  // addTodo: PropTypes.func.isRequired\n}\n\n//export default Question\n\nconst mapStateToProps = (state) => {\n  return {\n    firstName : state.account.firstName,\n    account: state.account,\n  }\n}\n\nexport default connect(mapStateToProps)(AltObjectTask)\n"],"sourceRoot":"/source/"}