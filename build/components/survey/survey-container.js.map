{"version":3,"sources":["components/survey/survey-container.js"],"names":["SurveyContainer","state","accounts","groups","selection","payload","_input","getSurveyInfo","console","log","getInfo","context","websocket","send","props","account","email","ws","readyState","setTimeout","setState","start","Date","now","infoObject","accountId","startTimestamp","endTimestamp","surveyData","display","flexWrap","children","cloneElement","parentProps","submit","infoToSubmit","submitInfo","propTypes","contextTypes","muiTheme","object","isRequired","mapStateToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA;;AAIA;;;;IAMMA,e;;;AAWJ,6BAAc;AAAA;;AAAA;;AAEZ,UAAKC,KAAL,GAAa;AACXC,gBAAU,EADC;AAEXC,cAAQ,EAFG;AAGXC,iBAAW,EAHA;AAIXC,eAAS;AAJE,KAAb;;AAOA;AACA,UAAKC,MAAL,GAAc,EAAd;AAVY;AAWb;;;;wCAEmB;AAClB,WAAKC,aAAL;AACD;;;gDAE2B;AAC1B,WAAKA,aAAL;AACD;;;oCAEe;AAAA;;AACdC,cAAQC,GAAR,CAAY,kCAAZ;AACA;AACA;AACA,UAAIC,UAAU,SAAVA,OAAU,GAAM;AAClB;AACA;AACA,eAAKC,OAAL,CAAaC,SAAb,CAAuBC,IAAvB,CAA6B,oCAAiB,OAAKC,KAAL,CAAWC,OAAX,CAAmBC,KAAnB,IAA4B,YAA7C,CAA7B;AACD,OAJD;;AAMA,UAAI,KAAKL,OAAL,CAAaC,SAAb,CAAuBK,EAAvB,CAA0BC,UAA1B,IAAwC,CAA5C,EAA+C;AAC7CC,mBAAYT,OAAZ,EAAqB,GAArB;AACD,OAFD,MAEO;AACLA;AACD;;AAED;AACA;AACA;AACA,WAAKU,QAAL,CAAc,EAACC,OAAOC,KAAKC,GAAL,EAAR,EAAd;AACD;;;+BAEWC,U,EAAa;AACvB,UAAIV,QAAQ,KAAKA,KAAjB;AACA,WAAKH,OAAL,CAAaC,SAAb,CAAuBC,IAAvB,CACE,uCACE;AACEY,mBAAW,aAAaX,KAAb,GAAoBA,MAAMC,OAAN,CAAcC,KAAd,IAAuB,YAA3C,GAAyD,EADtE;AAEEU,wBAAgB,KAAKzB,KAAL,CAAWoB,KAF7B;AAGEM,sBAAcL,KAAKC,GAAL,EAHhB;AAIEK,oBAAYJ;AAJd,OADF,CADF;AAUD;;;6BAEQ;AAAA;;AACP,UAAIV,QAAQ,KAAKA,KAAjB;;AAEA,aACE;AAAA;AAAA;AACE,iBAAO;AACLe,qBAAS,MADJ;AAELC,sBAAU;AAFL;AADT;AAOE,aAAKhB,KAAL,CAAWiB,QAAX,IACA,gBAAMC,YAAN,CACE,KAAKlB,KAAL,CAAWiB,QADb,EAEE;AACE1B,8CAAc,KAAKJ,KAAL,CAAWI,OAAzB,IAAkC4B,aAAa,KAAKnB,KAApD,GADF;AAEEoB,kBAAQ,gBAAEC,YAAF;AAAA,mBAAoB,OAAKC,UAAL,CAAiBD,YAAjB,CAApB;AAAA;AAFV,SAFF;AARF,OADF;AAmBD;;;;;AA1FGnC,e,CACGqC,S,GAAY;AACjB;AACA;AAFiB,C;AADfrC,e,CAMGsC,Y,GAAe;AACpBC,YAAU,iBAAUC,MAAV,CAAiBC,UADP;AAEpB7B,aAAW,iBAAU4B;AAFD,C;;;AAuFxB,IAAME,kBAAkB,SAAlBA,eAAkB,CAACzC,KAAD,EAAW;AACjC,SAAO;AACLc,aAASd,MAAMc;AADV,GAAP;AAGD,CAJD;;kBAMe,yBAAQ2B,eAAR,EAAyB1C,eAAzB,C","file":"components/survey/survey-container.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\nimport { connect } from 'react-redux'\nimport sessionData from '../../session-data'\n\nimport {\n  wsSurveyStateGet,\n} from '../../websocket-message/query-actions'\n\nimport {\n  wsSubmitSurveyInfo,\n} from '../../websocket-message/server-actions'\n\n\n\nclass SurveyContainer extends Component {\n  static propTypes = {\n    // groups: PropTypes.object,\n    // accounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    websocket: PropTypes.object,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n      accounts: { },\n      groups: { },\n      selection: [],\n      payload: 'some info',\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  componentDidMount() {\n    this.getSurveyInfo()\n  }\n\n  componentWillReceiveProps() {\n    this.getSurveyInfo()\n  }\n\n  getSurveyInfo() {\n    console.log('mooooontttttooooooooooo!!!!!!!!!')\n    // Load the study information\n    // Ask for the information to the server\n    let getInfo = () => {\n      // console.log('this.context.websocket.ws.readyState')\n      // console.log(this.context.websocket.ws.readyState)\n      this.context.websocket.send( wsSurveyStateGet(this.props.account.email || 'unassigned') )\n    }\n\n    if (this.context.websocket.ws.readyState == 0) {\n      setTimeout( getInfo, 180 )\n    } else {\n      getInfo()\n    }\n\n    // Take the payload directly from the session-data file.\n    // setTimeout(() => {console.log('didMount> ' + this.state.payload);this.setState({payload: 'some more info!!'});}, 4000)\n    // setTimeout(() => {console.log('didMount> ' + this.state.payload);this.submitInfo({payload: 'some more info!!'});}, 4000)\n    this.setState({start: Date.now()});\n  }\n\n  submitInfo( infoObject ) {\n    let props = this.props\n    this.context.websocket.send(\n      wsSubmitSurveyInfo(\n        {\n          accountId: 'account' in props? props.account.email || 'unassigned': '',\n          startTimestamp: this.state.start,\n          endTimestamp: Date.now(),\n          surveyData: infoObject,\n        }\n      )\n    )\n  }\n\n  render() {\n    let props = this.props\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n      {\n        this.props.children &&\n        React.cloneElement(\n          this.props.children,\n          {\n            payload: { ...this.state.payload, parentProps: this.props },\n            submit: ( infoToSubmit ) => this.submitInfo( infoToSubmit ),\n          }\n        )\n      }\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    account: state.account,\n  }\n}\n\nexport default connect(mapStateToProps)(SurveyContainer)\n"],"sourceRoot":"/source/"}