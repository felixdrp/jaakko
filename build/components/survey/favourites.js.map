{"version":3,"sources":["components/survey/favourites.js"],"names":["Favourites","props","rater","index","rating","data","state","favourites","f","undefined","currentRating","setState","gatherData","console","log","alerthing","alert","Array","nextProps","ideas","text","length","addTodo","textColor","context","muiTheme","palette","title","raters","padding","margin","minWidth","fontSize","color","paddingTop","split","map","item","i","marginBottom","submit","entry","display","fontWeight","width","description","contextTypes","PropTypes","object","isRequired","router","websocket","propTypes","mapStateToProps","firstName","account","task","payload"],"mappings":"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","file":"components/survey/favourites.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\n\nimport TextField from 'material-ui/TextField';\nimport FlatButton from 'material-ui/FlatButton';\nimport SelectField from 'material-ui/SelectField';\nimport MenuItem from 'material-ui/MenuItem';\nimport Slider from 'material-ui/Slider';\nimport {RadioButton, RadioButtonGroup} from 'material-ui/RadioButton';\n\nimport { connect } from 'react-redux'\n\nimport Timer from './timer'\n\nimport Wait from './wait'\nimport Rater from './rater'\n\nimport {\n ActionShop,\n ActionShoppingBasket,\n ActionSpeakerNotesOff,\n ActionSpeakerNotes,\n ActionSpellcheck,\n ActionStars,\n ActionStore,\n} from 'material-ui/svg-icons';\n\n\nclass Favourites extends Component {\n\n  constructor(props) {\n    super(props);\n     this.state = {favourites : new Array(6)};\n  }\n\n  static contextTypes = {\n    muiTheme: React.PropTypes.object.isRequired,\n    router: React.PropTypes.object.isRequired,\n    websocket: React.PropTypes.object,\n  };\n\n\n  componentWillReceiveProps(nextProps) {\n    this.setState({\n      data : nextProps.ideas || []\n    });\n  }\n\n\n  handleSave(text) {\n    if (text.length !== 0) {\n      this.props.addTodo(text)\n    }\n  }\n\n  rater = (index,rating) => {\n    var data = this.state.data;\n    var favourites = this.state.favourites;\n\n    if ( rating == -1 ){\n      for ( var f in favourites){\n        if (favourites[f] == index ){\n          favourites[f] = undefined;\n          this.currentRating = 0;\n          data[index].rating = 0;\n\n        }\n      }\n    } else {\n      if ( favourites[rating] == undefined ){\n      //  debugger\n        for ( var f in favourites){\n          if (favourites[f] == index ){\n            favourites[f] = undefined;\n            this.currentRating = 0;\n            data[index].rating = 0;\n\n          }\n        }\n        data[index].rating = rating;\n        this.currentRating = rating;\n        favourites[rating] = index;\n      }\n    }\n\n    this.setState({data: data});\n    this.setState({favourites: favourites});\n\n  }\n\n  gatherData = () => {\n\n    console.log(JSON.stringify(this.state));\n    return this.state\n\n  }\n\n  alerthing = () => {\n    alert('boom');\n  }\n\n  render() {\n\n    const { textColor } = this.context.muiTheme.palette;\n\n    let title = 'Favourites task';\n    let text = 'Rate the following works, and show which ones are your favourites:';\n\n    let data = this.state.data || [];\n    let raters = new Array(data.length);\n\n    return (\n      <div>\n      {\n        // <h1>{message}</h1>\n        // <Wait melacome={<ActionShop />} /><ActionStore /> <ActionShop />\n        // <div> {this.props.firstName} {v} {this.mlk()}</div>\n      }\n\n\n\n          <Card\n            style={{\n              padding: 30,\n              margin: '2% 15% 15%',\n              minWidth: 900,\n            }}\n          >\n            <CardHeader\n              title={title}\n              titleStyle={{\n                fontSize: 24,\n                color: textColor,\n              }}\n            />\n            <CardText\n              style={{\n                paddingTop: 0,\n              }}\n              >\n\n              {text.split('\\n').map( (item,i) => <div key={i} style={{marginBottom:10}}>{item}</div>)}\n            </CardText>\n\n\n            <br />\n            <Timer limitTime={10} timerCallback={() => this.props.submit( this.gatherData() )}></Timer>\n\n            {\n              data.map( (entry,i) => {\n                return <div key={i} style={{padding:5,display:'flex'}}>\n\n                              <Card style={{paddingTop: '0%',fontWeight: 800,}}>\n                                <CardText style={{padding:8}}>\n                                  {i+'.'}\n                                </CardText>\n                              </Card>\n\n                              <Card style={{width:460}}>\n                                <CardHeader style={{padding:8}}>\n                                  {entry.title}\n                                </CardHeader>\n                                <CardText style={{padding:8}}>\n                                  {entry.description}\n                                </CardText>\n                              </Card>\n\n                              <Card>\n                                  <CardText style={{padding:20}}>\n                                    <Rater entryIndex={i} raterCallback={this.rater} currentRating={entry.rating}/>\n                                  </CardText>\n                              </Card>\n\n                      </div>\n              } )\n            }\n\n\n          </Card>\n\n      </div>\n    )\n  }\n}\n\n\nFavourites.propTypes = {\n  // addTodo: PropTypes.func.isRequired\n}\n\n//export default Question\n\nconst mapStateToProps = (state) => {\n  return {\n    firstName : state.account.firstName,\n    ideas: (state.task.payload) ? state.task.payload.ideas: [],\n\n  }\n}\n\nexport default connect(mapStateToProps)(Favourites)\n"],"sourceRoot":"/source/"}