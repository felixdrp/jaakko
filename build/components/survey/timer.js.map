{"version":3,"sources":["components/survey/timer.js"],"names":["Timer","props","setTimer","totalSeconds","setState","startCountDown","startt","Date","timer","setInterval","tick","stopCountDown","clearInterval","state","elapsed","timerCallback","text","length","addTodo","left","minutes","Math","floor","seconds","toString","display","border","backgroundColor","padding","position","top","fontWeight","fontSize","color","propTypes","mapStateToProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAGA;;AACA;;;;AACA;;;;AAIA;;AAEA;;;;;;IAGMA,K;;;AAEJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA,oIACXA,KADW;;AAAA,UAWnBC,QAXmB,GAWR,UAACC,YAAD,EAAkB;AAC3B,YAAKC,QAAL,CAAc,EAACD,cAAeA,YAAhB,EAAd;AAED,KAdkB;;AAAA,UAoBnBE,cApBmB,GAoBF,YAAM;;AAEnB;AACA;AACA,YAAKD,QAAL,CAAc,EAAEE,QAAQ,IAAIC,IAAJ,EAAV,EAAsBC,OAAQC,YAAY,MAAKC,IAAjB,EAAuB,EAAvB,CAA9B,EAAd;AACH,KAzBkB;;AAAA,UA2BnBC,aA3BmB,GA2BH,YAAM;;AAElB;AACA;AACA;AACAC,oBAAc,MAAKC,KAAL,CAAWL,KAAzB;AACH,KAjCkB;;AAAA,UAmCnBE,IAnCmB,GAmCZ,YAAM;;AAEP;AACA;AACA,UAAK,MAAKG,KAAL,CAAWC,OAAX,GAAmB,IAApB,IAA6B,MAAKD,KAAL,CAAWV,YAA5C,EAAyD;AACvD,cAAKQ,aAAL;AACA,cAAKV,KAAL,CAAWc,aAAX;AACD;AACD,YAAKX,QAAL,CAAc,EAACU,SAAU,IAAIP,IAAJ,KAAa,MAAKM,KAAL,CAAWP,MAAnC,EAAd;AACL,KA5CkB;;AAEjB,UAAKO,KAAL,GAAa,EAACC,SAAQ,CAAT,EAAYX,cAAc,EAA1B,EAAb;AAFiB;AAGlB;;;;+BAEUa,I,EAAM;AACf,UAAIA,KAAKC,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAKhB,KAAL,CAAWiB,OAAX,CAAmBF,IAAnB;AACD;AACF;;;wCAOmB;AAChB,WAAKX,cAAL;AACH;;;6BA4BQ;AACP,UAAIS,UAAU,KAAKD,KAAL,CAAWC,OAAX,GAAqB,IAAnC;AACA,UAAIK,OAAQ,KAAKN,KAAL,CAAWV,YAAX,GAAwBW,OAAzB,GAAoC,CAApC,GAAyC,KAAKD,KAAL,CAAWV,YAAX,GAAwBW,OAAjE,GAA4E,CAAvF;AACA,UAAIM,UAAUC,KAAKC,KAAL,CAAWH,OAAK,EAAhB,CAAd;AACA,UAAII,UAAUF,KAAKC,KAAL,CAAWH,OAAK,EAAhB,EAAoBK,QAApB,GAA+BP,MAA/B,GAAwC,CAAxC,GAA4C,MAAKI,KAAKC,KAAL,CAAWH,OAAK,EAAhB,EAAoBK,QAApB,EAAjD,GAAmFH,KAAKC,KAAL,CAAWH,OAAK,EAAhB,EAAoBK,QAApB,EAAjG;;AAGA,aAEI;AAAA;AAAA,UAAK,OAAO;AACVC,qBAAS,QADC;AAEVC,oBAAQ,iBAFE;AAGVC,6BAAiB,OAHP;AAIVC,qBAAS,CAJC;AAKVC,sBAAU,OALA;AAMVC,iBAAI,CANM;AAOVX,kBAAK,CAPK;AAQVY,wBAAW,QARD;AASVC,sBAAS;AATC,WAAZ;AAAA;AAUe;AAAA;AAAA,YAAK,OAAO,EAAGP,SAAS,QAAZ,EAAsBQ,OAAM,KAA5B,EAAZ;AAAkDb,iBAAlD;AAAA;AAA4DG;AAA5D;AAVf,OAFJ;AAeD;;;;;AAGHvB,MAAMkC,SAAN,GAAkB;;AAEhB;AAFgB,CAAlB;;AAKA,IAAMC,kBAAkB,SAAlBA,eAAkB,CAACtB,KAAD,EAAW;AACjC,SAAO;AACL;AADK,GAAP;AAGD,CAJD;;kBAMe,yBAAQsB,eAAR,EAAyBnC,KAAzB,C","file":"components/survey/timer.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\nimport TextField from 'material-ui/TextField';\nimport RaisedButton from 'material-ui/RaisedButton';\n\n\n\nimport { connect } from 'react-redux'\n\nimport Wait from './wait'\n\n\nclass Timer extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {elapsed:0, totalSeconds: 20 };\n  }\n\n  handleSave(text) {\n    if (text.length !== 0) {\n      this.props.addTodo(text)\n    }\n  }\n\n  setTimer = (totalSeconds) => {\n    this.setState({totalSeconds : totalSeconds})\n\n  }\n\n  componentDidMount() {\n      this.startCountDown();\n  }\n\n  startCountDown = () => {\n\n      // componentDidMount is called by react when the component\n      // has been rendered on the page. We can set the interval here:\n      this.setState({ startt: new Date(), timer : setInterval(this.tick, 50)});\n  }\n\n  stopCountDown = () => {\n\n      // This method is called immediately before the component is removed\n      // from the page and destroyed. We can clear the interval here:\n      // this.state.elapsed = new Date() - this.start);\n      clearInterval(this.state.timer);\n  }\n\n  tick = () => {\n\n        // This function is called every 50 ms. It updates the\n        // elapsed counter. Calling setState causes the component to be re-rendered\n        if ((this.state.elapsed/1000) >= this.state.totalSeconds){\n          this.stopCountDown();\n          this.props.timerCallback();\n        }\n        this.setState({elapsed : new Date() - this.state.startt});\n  }\n\n  render() {\n    let elapsed = this.state.elapsed / 1000\n    let left = (this.state.totalSeconds-elapsed) > 0 ? (this.state.totalSeconds-elapsed) : 0;\n    let minutes = Math.floor(left/60)\n    let seconds = Math.floor(left%60).toString().length < 2 ? '0'+(Math.floor(left%60).toString()) : Math.floor(left%60).toString();\n\n\n    return (\n\n        <div style={{\n          display: 'inline',\n          border: '1px solid black',\n          backgroundColor: 'white',\n          padding: 7,\n          position: 'fixed',\n          top:4,\n          left:4,\n          fontWeight:'bolder',\n          fontSize:'large',\n        }}> Time Left: <div style={{  display: 'inline', color:'red',}}>{minutes}:{seconds}</div></div>\n\n    )\n  }\n}\n\nTimer.propTypes = {\n\n  // addTodo: PropTypes.func.isRequired\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    //firstName : state.account.firstName\n  }\n}\n\nexport default connect(mapStateToProps)(Timer)\n"],"sourceRoot":"/source/"}