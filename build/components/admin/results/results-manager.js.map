{"version":3,"sources":["components/admin/results/results-manager.js"],"names":["ResultsManager","state","_input","surveyxMonetaryTypeIndex","surveyxMonetaryTypeIndexType","accountsMonetary","accountsMonetaryTable","columnWidthStyle","props","storeSession","session","surveyPath","reduce","prev","element","index","type","push","map","surveyIndex","accounts","list","accountId","account","accountComponent","moneyData","taskNumber","total","email","firstName","surname","group","groups","results","surveyInfo","filter","includes","surveyId","forEach","current","index2","data","surveyType","surveyData","marginLeft","rank","score","pay","mathScore","width","style","gray","color","paddingBottom","propTypes","contextTypes","muiTheme","object","isRequired"],"mappings":"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","file":"components/admin/results/results-manager.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\n// groups\nimport {Card, CardActions, CardHeader, CardMedia, CardTitle, CardText} from 'material-ui/Card';\n\nimport {Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from 'material-ui/Table';\n\n// import FlatButton from 'material-ui/FlatButton';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Avatar from 'material-ui/Avatar';\n\nimport Class from 'material-ui/svg-icons/action/class';\nimport Language from 'material-ui/svg-icons/action/language';\nimport Group from 'material-ui/svg-icons/social/group';\nimport GroupAdd from 'material-ui/svg-icons/social/group-add';\nimport PersonOutline from 'material-ui/svg-icons/social/person-outline';\nimport DeveloperBoard from 'material-ui/svg-icons/hardware/developer-board';\n\n// Icons\n\nimport ShowChart from 'material-ui/svg-icons/editor/show-chart';\nimport LocalAtm from 'material-ui/svg-icons/maps/local-atm';\nimport Memory from 'material-ui/svg-icons/hardware/memory';\nimport ModeEdit from 'material-ui/svg-icons/editor/mode-edit';\nimport MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert';\nimport NavigationClose from 'material-ui/svg-icons/navigation/close';\n//\n// import GeneralInfoContainer from './general-info-container';\n// import SessionTrackerContainer from './session-tracker-container';\n\n\nimport {\n\n} from '../../../websocket-message/server-actions'\n\nclass ResultsManager extends Component {\n  static propTypes = {\n    // groups: PropTypes.object,\n    // unassignedAccounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  render() {\n    let surveyxMonetaryTypeIndex = []\n    let surveyxMonetaryTypeIndexType = []\n    let accountsMonetary = []\n    let accountsMonetaryTable = []\n\n    let columnWidthStyle = '40%'\n\n    if ( this.props.storeSession && 'session' in this.props.storeSession ) {\n      surveyxMonetaryTypeIndex = this.props.storeSession.session.surveyPath.reduce(\n        (prev, element, index) => {\n          // The survey have a monetary value?\n          if (element.type == 'RESULTS' || element.type == 'MATH_RESULTS') {\n            prev.push( index )\n            return prev\n          }\n          return prev\n        },\n        []\n      )\n\n\n      surveyxMonetaryTypeIndexType = surveyxMonetaryTypeIndex.map( surveyIndex => this.props.storeSession.session.surveyPath[surveyIndex].type )\n\n\n      accountsMonetary = this.props.storeSession.accounts.list.reduce(\n        ( prev, accountId, index ) => {\n          let account = this.props.storeSession.accounts[ accountId ]\n          let accountComponent = []\n          let moneyData = []\n          let taskNumber = 0\n          let total = 0\n\n          accountComponent.push( <span key={ account.email + 0 }> {account.firstName} {account.surname} {account.email} Group {account.group} Type {this.props.storeSession.groups[account.group].type} </span> )\n\n          moneyData = this.props.storeSession.results.surveyInfo.filter(\n            (element) => element.accountId == accountId && surveyxMonetaryTypeIndex.includes( element.surveyId )\n          )\n\n          moneyData.forEach(\n            (current, index2) => {\n              let data\n              if ( current.surveyType == 'RESULTS' ) {\n                data = current.surveyData.data[\"0\"]\n                accountComponent.push(\n                  <span\n                    key={ account.email + index2 + 1 }\n                    style={{\n                      marginLeft: 10,\n                    }}\n                  >\n                    Task Round {taskNumber} Rank {data.rank} Score {data.score} Pay {data.pay}\n                  </span>\n                )\n                taskNumber += 1\n                total += data.pay\n              } else {\n                data = current.surveyData.data[\"0\"]\n                accountComponent.push(\n                  <span\n                    key={ account.email + index2 + 1 }\n                    style={{\n                      marginLeft: 10,\n                    }}\n                  >\n                    Math Round Rank {data.rank} Score {data.mathScore} Pay {data.pay}\n                    <span\n                      style={{\n                        marginLeft: 10,\n                      }}\n                    >\n                      Total pay: {total + data.pay}\n                    </span>\n                  </span>\n                )\n              }\n            }\n          )\n\n          prev.push( <div key={ index }> {accountComponent} </div> )\n\n          return prev\n        },\n        []\n      )\n\n      accountsMonetaryTable = this.props.storeSession.accounts.list.reduce(\n        ( prev, accountId, index ) => {\n          let account = this.props.storeSession.accounts[ accountId ]\n          let accountComponent = []\n          let moneyData = []\n          let taskNumber = 0\n          let total = 0\n\n          accountComponent.push(\n            <TableRowColumn key={ account.email + 0 } style={{ width: columnWidthStyle }}>\n              {account.firstName} {account.surname} {account.email} Group {account.group} Type {this.props.storeSession.groups[account.group].type}\n            </TableRowColumn>\n          )\n\n          moneyData = this.props.storeSession.results.surveyInfo.filter(\n            (element) => element.accountId == accountId && surveyxMonetaryTypeIndex.includes( element.surveyId )\n          )\n\n          moneyData.forEach(\n            (current, index2) => {\n              let data\n              if ( current.surveyType == 'RESULTS' ) {\n                data = current.surveyData.data[\"0\"]\n                accountComponent.push(\n                  <TableRowColumn\n                    key={ account.email + index2 + 1 }\n                    style={{\n                      marginLeft: 10,\n                    }}\n                    // Task Round {taskNumber}\n                  >\n                    Rank {data.rank} Score {data.score} Pay {data.pay}\n                  </TableRowColumn>\n                )\n                taskNumber += 1\n                total += data.pay\n              } else {\n                data = current.surveyData.data[\"0\"]\n                accountComponent.push(\n                  <TableRowColumn\n                    key={ account.email + index2 + 1 }\n                    style={{\n                      marginLeft: 10,\n                    }}\n                    // Math Round\n                  >\n                    Rank {data.rank} Score {data.mathScore} Pay {data.pay}\n                  </TableRowColumn>\n                )\n                accountComponent.push(\n                  <TableRowColumn\n                    key={ account.email + index2 + 2 }\n                    style={{\n                      marginLeft: 10,\n                    }}\n                  >\n                    {total + data.pay}\n                  </TableRowColumn>\n                )\n              }\n            }\n          )\n\n          prev.push( <TableRow key={ index }> {accountComponent} </TableRow> )\n\n          return prev\n        },\n        []\n      )\n\n      accountsMonetaryTable = (\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHeaderColumn style={{ width: columnWidthStyle }}>Account Info</TableHeaderColumn>\n              {\n                surveyxMonetaryTypeIndexType.map(\n                  (type, index) => {\n                    if ( type == 'RESULTS' ) {\n                      return <TableHeaderColumn key={ 'task' + index }>Task Round { index }</TableHeaderColumn>\n                    } else {\n                      return <TableHeaderColumn key={ 'math' + index }>Math Round { index }</TableHeaderColumn>\n                    }\n                  }\n                )\n              }\n              <TableHeaderColumn>Total</TableHeaderColumn>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {\n              accountsMonetaryTable\n            }\n          </TableBody>\n        </Table>\n      )\n    }\n\n    const style = {\n      gray: {\n        color: '#565555'\n      }\n    }\n\n    return (\n      <Card\n        style={{\n          paddingBottom: 20,\n        }}\n      >\n        <CardHeader\n          title={ <span><ShowChart /> Results manager </span> }\n          subtitle=\"Results manager\"\n        />\n        <CardHeader\n          title={ <span><LocalAtm /> Results manager </span> }\n        />\n        {\n          // accountsMonetary \n        }\n        { accountsMonetaryTable }\n      </Card>\n    )\n  }\n}\n\nexport default ResultsManager\n"],"sourceRoot":"/source/"}