{"version":3,"sources":["components/admin/session/session-tracker-container.js"],"names":["SessionTrackerContainer","handleTouchTap","event","preventDefault","openMenus","state","slice","anchorEl","index","Number","currentTarget","attributes","getNamedItem","value","setState","handleRequestClose","selection","_input","props","storeSession","groupList","list","accounts","groups","accountsPerSurvey","sessionTrack","filterAccountByGroup","reduce","prev","groupID","accountList","length","forEach","acc","account","surveyPointer","undefined","push","email","survey","fill","actual","group","includes","map","groupId","type","display","flexDirection","paddingLeft","surveyPath","step","color","cursor","horizontal","vertical","wsSession","send","propTypes","contextTypes","muiTheme","object","isRequired"],"mappings":"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","file":"components/admin/session/session-tracker-container.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\nimport Menu from 'material-ui/Menu';\nimport Popover from 'material-ui/Popover';\nimport MenuItem from 'material-ui/MenuItem';\n\nimport PlayArrow from 'material-ui/svg-icons/av/play-arrow';\nimport Done from 'material-ui/svg-icons/action/done';\n\nimport AccountsPerGroupView from './accounts-per-group-view'\n\nimport sessionData from '../../../session-data'\n\nimport {\n  AWAIT,\n  // QUESTION,\n  // INSTRUCTIONS,\n} from '../../survey/survey-types'\n\nimport {\n  wsSurveyStepAll,\n} from '../../../websocket-message/server-actions'\n\n\n\nclass SessionTrackerContainer extends Component {\n  static propTypes = {\n    // groups: PropTypes.object,\n    // accounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    // wsSession: PropTypes.object,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n      // accounts: { },\n      // groups: { },\n      selection: [],\n\n      openMenus: [],\n      anchorEl: [],\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  handleTouchTap = (event) => {\n    // This prevents ghost click.\n    event.preventDefault();\n    let openMenus = this.state.openMenus.slice()\n    let anchorEl = this.state.anchorEl.slice()\n    let index = Number( event.currentTarget.attributes.getNamedItem('name').value )\n\n    openMenus[index] = true\n    anchorEl[index] = event.currentTarget\n\n    this.setState({\n      openMenus,\n      anchorEl,\n    });\n  };\n\n  handleRequestClose = (index) => {\n    let openMenus = this.state.openMenus.slice()\n\n    openMenus[index] = false\n    this.setState({\n      openMenus,\n    });\n  };\n\n  render() {\n    let props = this.props\n    let storeSession = props.storeSession\n    let groupList = {list:[]},\n        accounts = '',\n        groups = ''\n\n    let accountsPerSurvey = []\n    let sessionTrack = []\n\n    let filterAccountByGroup = null\n\n    if ( typeof storeSession == 'object' && 'groups' in storeSession ) {\n      groups = storeSession.groups\n\n      if (typeof groups == 'object' && 'list' in groups) {\n        groupList = storeSession.groups\n      }\n      // Number of accounts\n      accounts = groups.list.reduce(\n        (prev, groupID) => {\n          return prev + groups[groupID].accountList.length\n        },\n        0\n      )\n\n      // Link survey to account\n      storeSession.accounts.list.forEach( account => {\n        let acc = storeSession.accounts[ account ]\n        if ( accountsPerSurvey[acc.surveyPointer] == undefined ) {\n          accountsPerSurvey[acc.surveyPointer] = []\n        }\n\n        accountsPerSurvey[acc.surveyPointer].push( acc.email )\n      })\n\n      // Add type to the finished surveys.\n      for ( let survey of accountsPerSurvey ) {\n        if ( survey == undefined || survey == 'undefined' ) {\n          if ( filterAccountByGroup == null ) {\n            sessionTrack.push(<Done style={{fill: 'green'}} />)\n          } else {\n            sessionTrack.push(<span />)\n          }\n        } else {\n          filterAccountByGroup = survey.reduce(\n            (prev, actual) => {\n              let group = storeSession.accounts[ actual ].group\n              if ( prev.list.includes( group ) ) {\n                prev[group].push( actual )\n              } else {\n                prev.list.push( group )\n                prev[ group ] = [ actual ]\n              }\n              return prev\n            },\n            { list: [] }\n          )\n\n          sessionTrack.push(\n            <span>\n            {\n              filterAccountByGroup.list.map(\n                (groupId) => (\n                  <AccountsPerGroupView\n                    key={groupId}\n                    groupName={groupId}\n                    groupType={ groupId == 'unassigned'? 'unassigned': storeSession.groups[ groupId ].type }\n                    groupAccounts={ filterAccountByGroup[groupId] }\n                  />\n              ))\n            }\n            </span>\n          )\n        }\n      }\n\n      // console.log(accountsPerSurvey)\n      groups = groups.list.length\n    }\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 40,\n        }}\n      >\n      {\n        sessionData.surveyPath.map(\n          (step, index) => {\n            return (\n              <div key={index}>\n                { step.type == AWAIT?\n                  <span>\n                    <span\n                      name={index}\n                      style={{\n                        color: '#6c6c6c',\n                        cursor: 'pointer',\n                      }}\n                      onTouchTap={this.handleTouchTap}\n                    >\n                      <span> {step.type} </span>\n                    </span>\n                    <Popover\n                      name={index}\n                      open={this.state.openMenus[index] || false}\n                      anchorEl={this.state.anchorEl[index]}\n                      anchorOrigin={{horizontal: 'left', vertical: 'bottom'}}\n                      targetOrigin={{horizontal: 'left', vertical: 'top'}}\n                      onRequestClose={ () => this.handleRequestClose(index) }\n                    >\n                      <Menu>\n                        <MenuItem\n                          onClick={\n                            ()=> {\n                              // console.log('mlkkkk' + index);\n                              if (accountsPerSurvey[index] != undefined) {\n                                this.props.wsSession.send(\n                                  wsSurveyStepAll( accountsPerSurvey[index] )\n                                )\n                                // console.log(accountsPerSurvey[index]);\n                              }\n                              this.handleRequestClose(index);\n                            }\n                          }\n                        >\n                          <PlayArrow />\n                          Continue\n                        </MenuItem>\n                      </Menu>\n                    </Popover>\n                  </span>\n                  :\n\n                  <span> {step.type} </span>\n                }\n\n\n                { sessionTrack[index]? sessionTrack[index]: '' }\n              </div>\n            )\n          }\n        )\n      }\n      </div>\n    )\n  }\n}\n\nexport default SessionTrackerContainer\n"],"sourceRoot":"/source/"}