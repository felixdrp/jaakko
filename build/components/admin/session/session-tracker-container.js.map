{"version":3,"sources":["components/admin/session/session-tracker-container.js"],"names":["SessionTrackerContainer","state","accounts","groups","selection","_input","props","storeSession","groupList","list","accountsPerSurvey","sessionTrack","filterAccountByGroup","reduce","prev","groupID","accountList","length","forEach","acc","account","surveyPointer","undefined","push","email","survey","fill","actual","group","includes","map","groupId","type","console","log","display","flexDirection","paddingLeft","surveyPath","step","index","propTypes","contextTypes","muiTheme","object","isRequired"],"mappings":"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","file":"components/admin/session/session-tracker-container.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\nimport PlayArrow from 'material-ui/svg-icons/av/play-arrow';\nimport Done from 'material-ui/svg-icons/action/done';\n\nimport AccountsPerGroupView from './accounts-per-group-view'\n\nimport sessionData from '../../../session-data'\n\n\nclass SessionTrackerContainer extends Component {\n  static propTypes = {\n    // groups: PropTypes.object,\n    // accounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    // wsSession: PropTypes.object,\n    // websocket: PropTypes.object,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n      accounts: { },\n      groups: { },\n      selection: [],\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  render() {\n    let props = this.props\n    let storeSession = props.storeSession\n    let groupList = {list:[]},\n        accounts = '',\n        groups = ''\n\n    let accountsPerSurvey = []\n    let sessionTrack = []\n\n    let filterAccountByGroup = null\n\n    if ( typeof storeSession == 'object' && 'groups' in storeSession ) {\n      groups = storeSession.groups\n\n      if (typeof groups == 'object' && 'list' in groups) {\n        groupList = storeSession.groups\n      }\n      // Number of accounts\n      accounts = groups.list.reduce(\n        (prev, groupID) => {\n          return prev + groups[groupID].accountList.length\n        },\n        0\n      )\n\n      // Link survey to account\n      storeSession.accounts.list.forEach( account => {\n        let acc = storeSession.accounts[ account ]\n        if ( accountsPerSurvey[acc.surveyPointer] == undefined ) {\n          accountsPerSurvey[acc.surveyPointer] = []\n        }\n\n        accountsPerSurvey[acc.surveyPointer].push( acc.email )\n      })\n\n      // Add type to the finished surveys.\n      for ( let survey of accountsPerSurvey ) {\n        if ( survey == 'undefined' ) {\n          if ( filterAccountByGroup == null ) {\n            sessionTrack.push(<Done style={{fill: 'green'}} />)\n          }\n        } else {\n          filterAccountByGroup = survey.reduce(\n            (prev, actual) => {\n              let group = storeSession.accounts[ actual ].group\n              if ( prev.list.includes( group ) ) {\n                prev[group].push( actual )\n              } else {\n                prev.list.push( group )\n                prev[ group ] = [ actual ]\n              }\n              return prev\n            },\n            { list: [] }\n          )\n\n          sessionTrack.push(\n            <span>\n            {\n              filterAccountByGroup.list.map(\n                (groupId) => (\n                  <AccountsPerGroupView\n                    key={groupId}\n                    groupName={groupId}\n                    groupType={ groupId == 'unassigned'? 'unassigned': storeSession.groups[ groupId ].type }\n                    groupAccounts={ filterAccountByGroup[groupId] }\n                  />\n              ))\n            }\n            </span>\n          )\n        }\n      }\n\n      console.log(accountsPerSurvey)\n      groups = groups.list.length\n    }\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          paddingLeft: 40,\n        }}\n      >\n      {\n        sessionData.surveyPath.map(\n          (step, index) => {\n            return (\n              <div key={index}>\n                <PlayArrow />\n                <span> {step.type} </span>\n                { sessionTrack[index]? sessionTrack[index]: '' }\n              </div>\n            )\n          }\n        )\n      }\n      </div>\n    )\n  }\n}\n\nexport default SessionTrackerContainer\n"],"sourceRoot":"/source/"}