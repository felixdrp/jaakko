{"version":3,"sources":["components/admin/groups/group-container.js"],"names":["GroupContainer","state","accounts","groups","selection","_input","props","groupList","list","map","groupId","index","selectedAccounts","accountList","length","type","event","assignSelectedAccountsToGroup","removeGroup","selectionHandler","unassignAccount","display","flexWrap","propTypes","object","contextTypes","muiTheme","isRequired"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AAEA;;;;;;IAGMA,c;;;AAYJ,4BAAc;AAAA;;AAAA;;AAEZ,UAAKC,KAAL,GAAa;AACXC,gBAAU,EADC;AAEXC,cAAQ,EAFG;AAGXC,iBAAW;AAHA,KAAb;;AAMA;AACA,UAAKC,MAAL,GAAc,EAAd;AATY;AAUb;;;;6BAEQ;AACP,UAAIC,QAAQ,KAAKA,KAAjB;AACA,UAAIC,YAAY,EAAhB;AACA,UAAKD,MAAMH,MAAX,EAAmB;AACjBI,oBAAYD,MAAMH,MAAN,CAAaK,IAAb,CAAkBC,GAAlB,CACV,UAACC,OAAD,EAAUC,KAAV,EAAoB;AAClB,cAAIT,WAAW,qCAAsBQ,OAAtB,EAA+BJ,MAAMJ,QAArC,EAA+CI,MAAMM,gBAArD,CAAf;;AAEA,iBACE;AACE,iBAAKD,KADP;AAEE,qBAASD,OAFX;AAGE,sBAAUR,QAHZ;AAIE,4BAAgBI,MAAMH,MAAN,CAAaO,OAAb,EAAsBG,WAAtB,CAAkCC,MAJpD;AAKE,uBAAWR,MAAMH,MAAN,CAAaO,OAAb,EAAsBK,IALnC;AAME,2BAAgB,uBAACC,KAAD;AAAA,qBAAWV,MAAMW,6BAAN,CAAqCD,KAArC,EAA4CN,OAA5C,CAAX;AAAA,aANlB;AAOE,yBAAc,uBAAM;AAACJ,oBAAMY,WAAN,CAAkBR,OAAlB;AAA2B,aAPlD;AAQE,8BAAkBJ,MAAMa,gBAR1B;AASE,6BAAiBb,MAAMc;AATzB,YADF;AAaD,SAjBS,CAAZ;AAmBD;;AAED,aACE;AAAA;AAAA;AACE,iBAAO;AACLC,qBAAS,MADJ;AAELC,sBAAU;AAFL;AADT;AAMGf;AANH,OADF;AAUD;;;;;AA3DGP,c,CACGuB,S,GAAY;AACjBpB,UAAQ,iBAAUqB,MADD;AAEjBtB,YAAU,iBAAUsB;AAFH,C;AADfxB,c,CAMGyB,Y,GAAe;AACpBC,YAAU,iBAAUF,MAAV,CAAiBG;AADP,C;kBAwDT3B,c","file":"group-container.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\nimport { GroupView } from './';\n\nimport filterAccountsByGroup from '../../../modules/filter-accounts-by-group'\n\n\nclass GroupContainer extends Component {\n  static propTypes = {\n    groups: PropTypes.object,\n    accounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    // wsSession: PropTypes.object,\n    // websocket: PropTypes.object,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n      accounts: { },\n      groups: { },\n      selection: [],\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  render() {\n    let props = this.props\n    let groupList = ''\n    if  (props.groups) {\n      groupList = props.groups.list.map(\n        (groupId, index) => {\n          let accounts = filterAccountsByGroup(groupId, props.accounts, props.selectedAccounts)\n\n          return (\n            <GroupView\n              key={index}\n              groupId={groupId}\n              accounts={accounts}\n              accountsNumber={props.groups[groupId].accountList.length}\n              groupType={props.groups[groupId].type}\n              assignToGroup={ (event) => props.assignSelectedAccountsToGroup( event, groupId ) }\n              removeGroup={ () => {props.removeGroup(groupId)} }\n              selectionHandler={props.selectionHandler}\n              unassignAccount={props.unassignAccount}\n            />\n          )\n        }\n      )\n    }\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        {groupList}\n      </div>\n    )\n  }\n}\n\nexport default GroupContainer\n"]}