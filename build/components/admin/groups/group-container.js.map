{"version":3,"sources":["components/admin/groups/group-container.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AAEA;;AAEA;;;;;;IAGM,c;;;AAYJ,4BAAc;AAAA;;AAAA;;AAEZ,UAAK,KAAL,GAAa;AACX,gBAAU,EADC;AAEX,cAAQ,EAFG;AAGX,iBAAW;AAHA,KAAb;;AAMA;AACA,UAAK,MAAL,GAAc,EAAd;AATY;AAUb;;;;6BAEQ;AACP,UAAI,QAAQ,KAAK,KAAjB;AACA,UAAI,YAAY,EAAhB;AACA,UAAK,MAAM,MAAX,EAAmB;AACjB,oBAAY,MAAM,MAAN,CAAa,IAAb,CAAkB,GAAlB,CACV,UAAC,OAAD,EAAU,KAAV,EAAoB;AAClB,cAAI,WAAW,qCAAsB,OAAtB,EAA+B,MAAM,QAArC,EAA+C,MAAM,gBAArD,CAAf;;AAEA,iBACE;AACE,iBAAK,KADP;AAEE,qBAAS,OAFX;AAGE,sBAAU,QAHZ;AAIE,4BAAgB,MAAM,MAAN,CAAa,OAAb,EAAsB,MAJxC;AAKE,2BAAgB,uBAAC,KAAD;AAAA,qBAAW,MAAM,6BAAN,CAAqC,KAArC,EAA4C,OAA5C,CAAX;AAAA,aALlB;AAME,yBAAc,uBAAM;AAAC,oBAAM,WAAN,CAAkB,OAAlB;AAA2B,aANlD;AAOE,8BAAkB,MAAM,gBAP1B;AAQE,6BAAiB,MAAM;AARzB,YADF;AAYD,SAhBS,CAAZ;AAkBD;;AAED,aACE;AAAA;AAAA;AACE,iBAAO;AACL,qBAAS,MADJ;AAEL,sBAAU;AAFL;AADT;AAMG;AANH,OADF;AAUD;;;;;AA1DG,c,CACG,S,GAAY;AACjB,UAAQ,iBAAU,MADD;AAEjB,YAAU,iBAAU;AAFH,C;AADf,c,CAMG,Y,GAAe;AACpB,YAAU,iBAAU,MAAV,CAAiB;AADP,C;kBAuDT,c","file":"components/admin/groups/group-container.js","sourcesContent":["import React, { PropTypes, Component } from 'react'\n\nimport { GroupView } from './';\n\nimport filterAccountsByGroup from './filter-accounts-by-group'\n\n\nclass GroupContainer extends Component {\n  static propTypes = {\n    groups: PropTypes.object,\n    accounts: PropTypes.object,\n  };\n\n  static contextTypes = {\n    muiTheme: PropTypes.object.isRequired,\n    // wsSession: PropTypes.object,\n    // websocket: PropTypes.object,\n  };\n\n  constructor() {\n    super()\n    this.state = {\n      accounts: { },\n      groups: { },\n      selection: [],\n    };\n\n    // Used to store references.\n    this._input = {};\n  }\n\n  render() {\n    let props = this.props\n    let groupList = ''\n    if  (props.groups) {\n      groupList = props.groups.list.map(\n        (groupId, index) => {\n          let accounts = filterAccountsByGroup(groupId, props.accounts, props.selectedAccounts)\n\n          return (\n            <GroupView\n              key={index}\n              groupId={groupId}\n              accounts={accounts}\n              accountsNumber={props.groups[groupId].length}\n              assignToGroup={ (event) => props.assignSelectedAccountsToGroup( event, groupId ) }\n              removeGroup={ () => {props.removeGroup(groupId)} }\n              selectionHandler={props.selectionHandler}\n              unassignAccount={props.unassignAccount}\n            />\n          )\n        }\n      )\n    }\n\n    return (\n      <div\n        style={{\n          display: 'flex',\n          flexWrap: 'wrap',\n        }}\n      >\n        {groupList}\n      </div>\n    )\n  }\n}\n\nexport default GroupContainer\n"],"sourceRoot":"/source/"}